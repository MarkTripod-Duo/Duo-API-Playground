{
	"info": {
		"_postman_id": "0234d8c0-e34e-4fa3-916e-0c17b8c1f3fd",
		"name": "Duo Auth API [Child]",
		"description": "This collection is designed to interact with the [Duo Auth API](https://duo.com/docs/authapi). The Duo Auth API is a low-level, RESTful API for adding strong two-factor authentication to your website or application, and can be used to perform a variety of connectivity and authentication tests.\n\n#### 🚀 Getting started with this collection\n\n**Step 1:** In the **Duo Auth API \\[Child\\]** collection, go to the variables tab and enter the desired child account's name in the `child_account_name` variable field. This name must match exactly as it appears in the Duo Admin Panel. To confirm the correct account name, you can use the 'Retrieve Accounts' request in the **Duo Accounts API** collection, which provides a list of child accounts and their names.\n\n**Step2 :** After populating `child_account_name`, navigate to the **Setup Child Account** folder and execute the 'Deploy Auth API' request. This request creates an Admin API integration on the target acount, and populates the request credentials automatically for use.\n\n**Step 3**: Be sure to configure any necessary or optional parameters for any particular request as specified in the Duo Admin API documentation. After setting up the environment variables and configuring parameters as needed, you're ready to utilize any request within the Duo Auth API \\[Child\\] collection.\n\n#### 💡 Collection Note\n\nThe collection performs multiple functions.\n\n1. Duo Auth API: This request automates the deployment of the Auth API through a series of steps. Initially, it runs \"Retrieve Accounts\" to retrieve the list of child accounts and identifies the specific account ID by referencing the `child_account_name` variable. Subsequently, it creates the Auth API on the identified child account via \"Create Integration\" and obtains the secret key required for authentication via \"Retrieve Secret Key.\" The script stores these values as both collection variables and in the `child_admin_api_matrix` for future use. In subsequent requests, it checks for existing entries in the matrix to determine if the Auth API \\[Child\\] already exists and updates the collection variables accordingly.\n2. Clear Auth API Variables: This request serves to clear the values of the collection variables related to the Admin API. It resets the `child_account_name`, `child_account_account_id`, `child_auth_api_ikey`, `child_auth_api_skey`, and `child_auth_api_host` variables to empty values. It's important to clear the variables to ensure reqeust are run on the correct account.\n    \n\n#### 🔍 Variable Reference\n\nBelow is a list of variables defined within this collection. Some variables are dynamically generated during API interactions, while others need to be manually configured.\n\n| Variable Name | Description | Scope |\n| --- | --- | --- |\n| child_auth_api_ikey | Your Accounts API Integration Key. This needs to be manually set in the global variables. | Global |\n| child_auth_api_skey | Your Accounts API Secret Key. This needs to be manually set in the global variables. | Global |\n| child_auth_api_host | Your Accounts API Hostname. This needs to be manually set in the global variables. | Global |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165404",
		"_collection_link": "https://duomsp.postman.co/workspace/Duo-MSP-API-Playground~c7115430-1cbf-4f66-9ded-2a737488a755/collection/27165404-0234d8c0-e34e-4fa3-916e-0c17b8c1f3fd?action=share&source=collection_link&creator=27165404"
	},
	"item": [
		{
			"name": "Setup Child Account",
			"item": [
				{
					"name": "Deploy Auth API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Checks for an existing entry in child_auth_api_matrix",
									"function checkAndUpdateForExistingAccount() {",
									"    const accountName = pm.collectionVariables.get(\"child_account_name\");",
									"    const currentMatrix = pm.collectionVariables.get(\"child_auth_api_matrix\");",
									"    ",
									"    if (currentMatrix) {",
									"        const matrixArray = JSON.parse(currentMatrix);",
									"        const existingEntry = matrixArray.find(entry => entry.accountName === accountName);",
									"        ",
									"        if (existingEntry) {",
									"            // Update collection variables with the details from the existing entry",
									"            pm.collectionVariables.set(\"child_account_account_id\", existingEntry.accountId);",
									"            pm.collectionVariables.set(\"child_auth_api_ikey\", existingEntry.integrationKey);",
									"            pm.collectionVariables.set(\"child_auth_api_skey\", existingEntry.secretKey);",
									"            pm.collectionVariables.set(\"child_auth_api_host\", existingEntry.apiHostname);",
									"            ",
									"       var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"        console.log(`Auth API [Child] already exists on ${childAccountName} and is available for use.`);",
									"            return true;",
									"        }",
									"    }",
									"    // Return false if no existing entry was found",
									"    return false;",
									"}",
									"",
									"// If found, updates collection variables with the associated request credentials",
									"if (checkAndUpdateForExistingAccount()) {} else {",
									"   ",
									"//HMAC 1",
									"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); ",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\"); ",
									"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\"); ",
									"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
									"",
									"    // Check if the API hostname is defined. If not, throw an error.",
									"    if (!API_HOSTNAME) {",
									"        throw new Error(\"API_HOSTNAME is not defined\");",
									"    }",
									"     ",
									"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
									"    if (requestUrl.indexOf(\"?\") == -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"",
									"    // Get the index of the start of the query parameters in the URL ",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"",
									"    // Calculate the length of the hostname",
									"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"",
									"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
									"     ",
									"    // Clean up api_call by removing any unwanted characters",
									"    api_call = api_call.replace(\"}}\", \"\");",
									"    // console.log('api_call:', api_call);",
									"",
									"    var params_unsorted = \"\";",
									"    var params_array = [];",
									"    //Create unsorted array of parameters from either URL or Body",
									"    //Assuming POST parameters are in the Body, GET paramters are in URL",
									"    //(technically it looks like POST can be in the URL as well)",
									"",
									"    // Depending on the HTTP method and the existence of a request body,",
									"    // extract the query parameters from the URL or the body into params_array",
									"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"        for (var parameter1 in requestBody) {",
									"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"            params_array.push(params_unsorted);",
									"        }",
									"    } else {",
									"        params_unsorted = requestUrl.substring(paramsStart+1);",
									"        params_array = params_unsorted.split(\"&\");",
									"    }",
									"     ",
									"    params_array.sort();                    //lexicographically sort parameters by key",
									"    var encoded_params = \"\";               ",
									"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
									"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
									"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
									"    }",
									"     ",
									"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\",timestamp);",
									" ",
									"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
									"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									"    // console.log(requestData);",
									" ",
									"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
									"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"     ",
									"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
									"    var prebase = IKEY+\":\"+ hmacDigest;",
									"    // console.log(\"prebase:\", prebase)",
									"     ",
									"    //encodes a string in base-64",
									"    var baseComplete = btoa(prebase);",
									"",
									"    var authHeader = \"Basic \"+ baseComplete;",
									"    return authHeader;",
									"}",
									"",
									"// HMAC 2",
									"function getAuthHeader2(httpMethod, requestUrl, requestBody, apiHostname) {",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\");",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\");",
									"",
									"    if (requestUrl.indexOf(\"?\") === -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
									"",
									"    var params_unsorted = requestUrl.substring(paramsStart + 1);",
									"    var params_array = params_unsorted.split(\"&\");",
									"    params_array.sort();",
									"    var encoded_params = params_array.map(urlEncodeParams).join(\"&\");",
									"",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\", timestamp);",
									"",
									"    var jsonDataString = JSON.stringify(requestBody);",
									"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");",
									"",
									"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
									"",
									"    var prebase = IKEY + \":\" + hmacDigest;",
									"    var baseComplete = btoa(prebase);",
									"    var authHeader = \"Basic \" + baseComplete;",
									"    return authHeader;",
									"}",
									"",
									"function urlEncodeParams(value) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"// Request 1 - Get Accounts",
									"function getAccounts() {",
									"    var url1 = `https://${pm.globals.get(\"accounts_api_host\")}/accounts/v1/account/list`;",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));",
									"",
									"    pm.sendRequest({",
									"        url: url1,",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {}",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.log(\"Error:\", err);",
									"            return;",
									"        }",
									"",
									"        var responseJson = JSON.parse(res.text());",
									"        if (responseJson.stat === \"OK\") {",
									"            // Logic to set child_account_account_id and child_auth_api_host",
									"            handleGetAccountsResponse(responseJson);",
									"        } else {",
									"            console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
									"        }",
									"    });",
									"}",
									"",
									"// // Handler for Get Accounts response",
									"// function handleGetAccountsResponse(responseJson) {",
									"//     // Extract relevant data from responseJson and set collection variables",
									"//     var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"//     var foundAccount = responseJson.response.find(acc => acc.name === childAccountName);",
									"",
									"//     if (foundAccount) {",
									"//         pm.collectionVariables.set(\"child_account_account_id\", foundAccount.account_id);",
									"//         pm.collectionVariables.set(\"child_auth_api_host\", foundAccount.api_hostname);",
									"     ",
									"",
									"//         // Proceed with Request 2 - Create Integration",
									"//         createIntegration(foundAccount.api_hostname, foundAccount.account_id);",
									"//     } else {",
									"//         console.log(`No matching account found for ${childAccountName}.`);",
									"//     }",
									"// }",
									"",
									"// Handler for Get Accounts response",
									"function handleGetAccountsResponse(responseJson) {",
									"    // Extract relevant data from responseJson and set collection variables",
									"    var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"    ",
									"    // Check if childAccountName is not null and not empty",
									"    if (childAccountName) {",
									"        var foundAccount = responseJson.response.find(acc => acc.name === childAccountName);",
									"",
									"        if (foundAccount) {",
									"            pm.collectionVariables.set(\"child_account_account_id\", foundAccount.account_id);",
									"            pm.collectionVariables.set(\"child_auth_api_host\", foundAccount.api_hostname);",
									"",
									"        // Proceed with Request 2 - Create Integration",
									"        createIntegration(foundAccount.api_hostname, foundAccount.account_id);",
									"    } else {",
									"        // Case when childAccountName is provided but no matching account is found",
									"        console.log(`No matching account found for ${childAccountName}. Please update the child_account_name collection variable with a correct account name.`);",
									"    }",
									"    } else {",
									"    // Case when childAccountName is null or empty",
									"    console.log(\"No account name found. Please update the child_account_name collection variable with the desired account name.\");",
									"    }",
									"}",
									"",
									"",
									"",
									"// Request 2 - Create Integration",
									"function createIntegration(apiHostname, accountId) {",
									"    var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"    ",
									"    // Ensure accountId is available",
									"    if (!accountId) {",
									"        console.log(\"Account ID is not set. Stopping execution.\");",
									"        return;",
									"    }",
									"",
									"    // Pre-check for existing integration in child_auth_api_matrix",
									"    var currentMatrix = pm.collectionVariables.get(\"child_auth_api_matrix\");",
									"    currentMatrix = currentMatrix ? JSON.parse(currentMatrix) : [];",
									"    var existingEntry = currentMatrix.find(entry => entry.accountName === childAccountName && entry.accountId === accountId);",
									"",
									"    if (existingEntry) {",
									"        console.log(`Duo Auth API [Child] already exists for ${childAccountName} and is available for use.`);",
									"        // Optionally, you can call retrieveSecretKey or any other function here if needed.",
									"        return;",
									"    }",
									"",
									"    var urlWithAccountId = `https://${apiHostname}/admin/v2/integrations?account_id=${accountId}`;",
									"    var requestBody = {",
									"        \"name\": \"Auth API [Child]\",",
									"        \"type\": \"authapi\"",
									"    };",
									"",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader2(\"POST\", urlWithAccountId, requestBody, apiHostname));",
									"",
									"    pm.sendRequest({",
									"        url: urlWithAccountId,",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(requestBody)",
									"        }",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.error('Network error:', err);",
									"            return;",
									"        }",
									"        var responseData = res.json();",
									"        if (res.code === 200) {",
									"            var integrationKey = responseData.response.integration_key;",
									"            pm.collectionVariables.set(\"child_auth_api_ikey\", integrationKey);",
									"          ",
									"",
									"            // Update matrix and proceed to retrieve the secret key",
									"            // updateMatrix(accountId, childAccountName, integrationKey, pm.collectionVariables.get(\"child_auth_api_skey\"), apiHostname);",
									"            ",
									"            retrieveSecretKey(apiHostname, integrationKey, accountId);",
									"        } else {",
									"            console.error(`Request 2 failed. HTTP status code: ${res.code}; Response:`, responseData);",
									"        }",
									"    });",
									"}",
									"",
									"// Request 3 - Retrieve Secret Key",
									"function retrieveSecretKey(apiHostname, integrationKey, accountId) {",
									"    // Retrieve childAccountName within this function to ensure it's defined",
									"    var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"    if (!accountId) {",
									"        console.log(\"Account ID is not provided. Stopping execution.\");",
									"        return;",
									"    }",
									"    if (!childAccountName) {",
									"        console.log(\"Child Account Name is not provided. Stopping execution.\");",
									"        return;",
									"    }",
									"",
									"    var urlWithAccountId2 = `https://${apiHostname}/admin/v1/integrations/${integrationKey}/skey?account_id=${accountId}`;",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader2(\"GET\", urlWithAccountId2, {}, apiHostname));",
									"",
									"    pm.sendRequest({",
									"        url: urlWithAccountId2,",
									"        method: \"GET\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({})",
									"        }",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.error('Network error on the second request:', err);",
									"        } else {",
									"            var responseData = res.json();",
									"            if (res.code === 200) {",
									"                var secretKey = responseData.response.secret_key;",
									"                pm.collectionVariables.set(\"child_auth_api_skey\", secretKey);",
									"                updateMatrix(accountId, childAccountName, integrationKey, secretKey, apiHostname);",
									"                console.log(`Auth API [Child] created successfully on ${childAccountName} and is available for use.`);",
									"            } else {",
									"                console.error(`Second request failed. Response code: ${res.code}; Response:`, responseData);",
									"            }",
									"        }",
									"    });",
									"}",
									"",
									"function updateMatrix(accountId, childAccountName, integrationKey, secretKey, apiHostname) {",
									"    var currentMatrix = pm.collectionVariables.get(\"child_auth_api_matrix\");",
									"    currentMatrix = currentMatrix ? JSON.parse(currentMatrix) : [];",
									"    currentMatrix.push({",
									"        accountId: accountId,",
									"        accountName: childAccountName,",
									"        integrationKey: integrationKey,",
									"        secretKey: secretKey,",
									"        apiHostname: apiHostname",
									"    });",
									"    pm.collectionVariables.set(\"child_auth_api_matrix\", JSON.stringify(currentMatrix));",
									"}",
									"",
									"// Make sure getAccounts function is defined somewhere above this snippet",
									"getAccounts();",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Auth API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear the values of the collection variables",
									"pm.collectionVariables.set(\"child_account_name\", \"\");",
									"pm.collectionVariables.set(\"child_account_account_id\", \"\");",
									"pm.collectionVariables.set(\"child_auth_api_ikey\", \"\");",
									"pm.collectionVariables.set(\"child_auth_api_skey\", \"\");",
									"pm.collectionVariables.set(\"child_auth_api_host\", \"\");",
									"",
									"// Retrieve the account name from the collection variable",
									"const accountName = pm.collectionVariables.get(\"child_account_name\");",
									"",
									"// Log a message to confirm the action, specifically formatted as requested",
									"console.log(`Cleared Auth API collection variables for.`);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Duo service is reachable.\");",
							"} else {",
							"    console.log(\"Duo service is not reachable.\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/ping",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"ping"
					]
				},
				"description": "The `/ping` endpoint acts as a \"liveness check\" that can be called to verify that Duo is up before trying to call other Auth API endpoints. Unlike the other endpoints, this one does **not** have to be signed with the [Authorization header](https://duo.com/docs/authapi#authentication).\n\nThis endpoint is also suitable for use with Duo's [v2 Web SDK](https://duo.com/docs/duoweb-v2) to verify that Duo's service is responding before initializing frame authentication."
			},
			"response": []
		},
		{
			"name": "Check",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Auth API integration and secret keys are valid. The signature is being generated properly.\");",
							"} else {",
							"    console.log(\"There seems to be an issue. Please check the API integration and secret keys.\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/check",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"check"
					]
				},
				"description": "The `/check` endpoint can be called to verify that the Auth API integration and secret keys are valid, and that the signature is being generated properly.\n\nThis endpoint is also suitable for use with Duo's [v2 Web SDK](https://duo.com/docs/duoweb-v2) to verify integration information before initializing frame authentication."
			},
			"response": []
		},
		{
			"name": "Logo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Success, the response body is Content-Type image/png, containing the logo.\");",
							"} else {",
							"    console.log(\"No logo was found.\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/logo",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"logo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enroll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Success, created enrollment code for new user.\");",
							"} else {",
							"    console.log(\"Invalid or missing parameters, or a user with username already exists.\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/enroll?username=",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"enroll"
					],
					"query": [
						{
							"key": "username",
							"value": "",
							"description": "Optional: Username for the created user. If not given, a random username will be assigned and returned."
						},
						{
							"key": "valid_secs",
							"value": "",
							"description": "Optional: Seconds for which the activation code will remain valid. Default: 86400 (one day).",
							"disabled": true
						}
					]
				},
				"description": "The `/enroll` endpoint provides a programmatic way to enroll new users with Duo two-factor authentication. It creates the user in Duo and returns a code (as a QR code) that Duo Mobile can scan with its built-in camera. Scanning the QR code adds the user's account to the app so that they receive and respond to Duo Push login requests."
			},
			"response": []
		},
		{
			"name": "Enroll Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Successfully verified user enrollment status.\");",
							"} else {",
							"    console.log(\"Invalid or missing parameters, verify user_id and activation_code parameters.\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/enroll_status?user_id=&activation_code=",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"enroll_status"
					],
					"query": [
						{
							"key": "user_id",
							"value": "",
							"description": "Required: ID of the user."
						},
						{
							"key": "activation_code",
							"value": "",
							"description": "Required: Activation code, as returned from /enroll."
						}
					]
				},
				"description": "Check whether a user has completed enrollment."
			},
			"response": []
		},
		{
			"name": "Pre Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Successfully verified users log in status and available authentication factors.\");",
							"} else {",
							"    console.log(\"Invalid or missing parameters, or the specified username is not in a state that allows preauth to complete successfully.\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/preauth?user_id=",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"preauth"
					],
					"query": [
						{
							"key": "user_id",
							"value": "",
							"description": "Required: if username is not specified: Permanent, unique identifier for the user as generated by Duo upon user creation (e.g. DUYHV6TJBC3O4RITS1WC)."
						},
						{
							"key": "username",
							"value": "",
							"description": "Required: if user_id is not specified: Unique identifier for the user that is commonly specified by your application during user creation (e.g. user@domain.com). This value may also represent a username alias assigned to a user",
							"disabled": true
						},
						{
							"key": "ipaddr",
							"value": "",
							"description": "Optional: The IP address of the user to be authenticated, in dotted quad format. This will cause an \"allow\" response to be sent if appropriate for requests from a trusted network.",
							"disabled": true
						},
						{
							"key": "hostname",
							"value": "",
							"description": "Optional: The host name of the device accessing the application.",
							"disabled": true
						},
						{
							"key": "trusted_device_token",
							"value": "",
							"description": "Optional: If the trusted_device_token is present and the Auth API application has an effective policy that enables Remembered Devices for each browser-based application, return an \"allow\" response for the lifetime of the token as set by the Duo administrator in the policy.",
							"disabled": true
						}
					]
				},
				"description": "The `/preauth` endpoint determines whether a user is authorized to log in, and (if so) returns the user's available authentication factors."
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Successfully verified users log in status and available authentication factors.\");",
							"} else {",
							"    console.log(\"Invalid or missing parameters, or the specified username is not in a state that allows preauth to complete successfully.\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "device",
							"value": "auto",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/auth?user_id=DUYS3Z5IAKUMO2XDF7HK&factor=&device=&async=1",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"auth"
					],
					"query": [
						{
							"key": "user_id",
							"value": "DUYS3Z5IAKUMO2XDF7HK",
							"description": "Required: if username is not specified: Permanent, unique identifier for the user as generated by Duo upon user creation (e.g. DUYHV6TJBC3O4RITS1WC)."
						},
						{
							"key": "username",
							"value": "",
							"description": "Required: if user_id is not specified: Unique identifier for the user that is commonly specified by your application during user creation (e.g. user@domain.com). This value may also represent a username alias assigned to a user",
							"disabled": true
						},
						{
							"key": "factor",
							"value": "",
							"description": "Required: Factor to use for authentication. Currently, the following choices are supported:\nauto: Use recommended out-of-band factor (push or phone).\npush: Authenticate with Duo Push.\npasscode: Authenticate with a passcode (Duo Mobile, SMS, hardware token, bypass code).\nsms: Send SMS passcodes (note: does not authenticate, requires re-prompt).\nphone: Authenticate with phone callback."
						},
						{
							"key": "device",
							"value": "",
							"description": "Required: ID of the device. This device must have the \"push\" capability.\n\nYou may also specify \"auto\" to use the first of the user's devices with the \"push\" capability."
						},
						{
							"key": "ipaddr",
							"value": "",
							"description": "Optional: The IP address of the user to be authenticated, in dotted quad format. This will cause an \"allow\" response to be sent if appropriate for requests from a trusted network.",
							"disabled": true
						},
						{
							"key": "hostname",
							"value": "",
							"description": "Optional: The host name of the device accessing the application.",
							"disabled": true
						},
						{
							"key": "trusted_device_token",
							"value": "",
							"description": "Optional: If the trusted_device_token is present and the Auth API application has an effective policy that enables Remembered Devices for each browser-based application, return an \"allow\" response for the lifetime of the token as set by the Duo administrator in the policy.",
							"disabled": true
						},
						{
							"key": "async",
							"value": "1"
						}
					]
				},
				"description": "The `/preauth` endpoint determines whether a user is authorized to log in, and (if so) returns the user's available authentication factors."
			},
			"response": []
		},
		{
			"name": "Auth Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"const jsonResponse = pm.response.json();",
							"",
							"// Check if the \"stat\" value is \"OK\"",
							"if (jsonResponse.stat === \"OK\") {",
							"    // Log a message in the console",
							"    console.log(\"Success, verified authentication status.\");",
							"} else {",
							"    console.log(\"Invalid or missing parameters, verify the txid param is correct.\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{child_auth_api_host}}/auth/v2/auth_status?txid=",
					"protocol": "https",
					"host": [
						"{{child_auth_api_host}}"
					],
					"path": [
						"auth",
						"v2",
						"auth_status"
					],
					"query": [
						{
							"key": "txid",
							"value": "",
							"description": "Required: The transaction ID of the authentication attempt, as returned by the /auth endpoint."
						}
					]
				},
				"description": "The `/auth_status` endpoint \"long-polls\" for the next status update from the authentication process for a given transaction. That is to say, if no status update is available at the time the request is sent, it will wait until there is an update before returning a response."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Tested on Postman 7.8",
					"",
					"//Variable declaration",
					"    // Require 'url' module to use its methods for handling and transforming URLs.",
					"        var URL = require('url');",
					"",
					"    // Get the hostname for the accounts API from Postman collection variables.",
					"        var hostname = pm.collectionVariables.get(\"child_auth_api_host\");",
					"",
					"    // Declare a variable to hold Duo Authentication Version",
					"        var duo_auth_ver;",
					"    // Retrieve the request url",
					"        var req_url = request.url;",
					"",
					"function urlEncodeParams(value, index, array) {",
					"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
					"}",
					"",
					"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody, duo_auth_ver) {",
					"    var IKEY = pm.collectionVariables.get(\"child_auth_api_ikey\"); //Auth or Admin API IKEY",
					"    var SKEY = pm.collectionVariables.get(\"child_auth_api_skey\"); //Auth or Admin API SKEY",
					"    var API_HOSTNAME = pm.collectionVariables.get(\"child_auth_api_host\"); //Auth or Admin API Hostname",
					"    ",
					"    q_str = decodeURIComponent(q_str);",
					"    api_call = path",
					"",
					"    var AUTH_TYPE;",
					"    var hmacDigest;",
					"",
					"    //The current time, formatted as RFC 2822. This must be the same string as the \"Date\" header (or X-Duo-Date header).",
					"    var moment = require('moment');",
					"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"    pm.globals.set(\"timestampHeader\",timestamp);",
					"",
					"    switch (duo_auth_ver) {",
					"        case 'v2':",
					"            AUTH_TYPE = 'HMAC-SHA1';",
					"            var params_unsorted = \"\";",
					"            var params_array = [];",
					"            //Create unsorted array of parameters from either URL or Body",
					"            //Assuming POST parameters are in the Body, GET paramters are in URL",
					"            //(technically it looks like POST can be in the URL as well)",
					"            if (Object.keys(requestBody).length !== 0) {",
					"                for (var parameter1 in requestBody) {",
					"                    params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
					"                    params_array.push(params_unsorted);",
					"                }",
					"            } else {",
					"                params_unsorted = q_str;",
					"                if (q_str) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                }",
					"            }",
					"            ",
					"            params_array.sort();                    //lexicographically sort parameters by key",
					"            var encoded_params = \"\";               ",
					"            if (params_array[0] !== \"\"){            //check if there are any Params to encode and create the string from",
					"            var encoded_params_array = params_array.map(urlEncodeParams);   //create URL-encoded array of key=value pairs from the sorted array",
					"                encoded_params = encoded_params_array.join(\"&\");                //create string of parameters joined by &",
					"            }",
					"            var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
					"            // console.log('requestData:',requestData);",
					"            //compute the HMAC-SHA1 of this canonical representation, using your Duo application's secret key as the HMAC key",
					"            var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
					"            // console.log(hmacDigest);",
					"            pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded' })",
					"            break;",
					"        case 'v5':",
					"            AUTH_TYPE = 'HMAC-SHA512';",
					"            var body_length = Object.keys(requestBody).length",
					"            var encoded_params = \"\";  ",
					"            var requestData = \"\"",
					"            ",
					"            if (body_length != 0) {  ",
					"                var jsonData = JSON.parse(pm.request.body.toJSON().raw)",
					"                jsonData = JSON.stringify(jsonData)",
					"                params_unsorted = q_str;",
					"                if(params_unsorted.length > 0){",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort(); ",
					"                    var encoded_params_array = params_array.map(urlEncodeParams);   //create URL-encoded array of key=value pairs from the sorted array",
					"                    encoded_params = encoded_params_array.join(\"&\");  ",
					"                    }  ",
					"                // console.log('encoded_params:', encoded_params);",
					"                requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params+\"\\n\"+CryptoJS.SHA512(jsonData)+\"\\n\"+CryptoJS.SHA512(\"\");",
					"                pm.request.body = jsonData",
					"            }",
					"            else {",
					"                params_unsorted = q_str;",
					"                if(params_unsorted.length > 0){",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort(); ",
					"                    var encoded_params_array = params_array.map(urlEncodeParams);   //create URL-encoded array of key=value pairs from the sorted array",
					"                    encoded_params = encoded_params_array.join(\"&\");  ",
					"                    }",
					"                    // console.log('encoded_params:', encoded_params);",
					"                requestData = timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params+\"\\n\"+CryptoJS.SHA512(\"\")+\"\\n\"+CryptoJS.SHA512(\"\");",
					"                // console.log(\"requestData:\", requestData);",
					"                // console.log(\"encoded_params:\", encoded_params)",
					"            }",
					"             ",
					"             ",
					"            //   console.log(\"Post-decoding encoded_params:\", encoded_params);",
					"            // console.log('Post-concatenation requestData:', requestData);",
					"             ",
					"             //compute the HMAC-SHA1 of this canonical representation, using your Duo application's secret key as the HMAC key",
					"            var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
					"            // pm.request.headers.add({key: 'Content-Type', value: 'application/json' })",
					"            break;",
					"        }",
					"            ",
					"        //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
					"        var prebase = IKEY+\":\"+ hmacDigest;",
					"        // console.log(\"Prebase:\", prebase);",
					"        ",
					"        //encodes a string in base-64",
					"        var baseComplete = btoa(prebase);",
					"        // console.log(\"Base Complete:\", baseComplete);",
					"    ",
					"        var authHeader = \"Basic \"+ baseComplete;",
					"        return authHeader;",
					"}",
					"",
					"//Find and replace",
					"    // Check if the request url includes '/v1/' or '/v2/' and set the Duo Authentication Version accordingly",
					"        if (req_url.includes('/v1/')) {",
					"            duo_auth_ver = 'v2'; ",
					"        } else if (req_url.includes('/v2/')) {",
					"            duo_auth_ver = 'v5'; ",
					"        }",
					"",
					"    // Check if the request URL includes '{{accountId}}'",
					"        if (req_url.includes('{{account_id}}')) {",
					"        var account_id = pm.globals.get('account_id');",
					"        req_url = req_url.replace('{{account_id}}', account_id);",
					"        // console.log(\"Updated URL (accountId):\", req_url);",
					"    }",
					"",
					"    // Check if the request URL includes '{{ChildAccount}}'",
					"        if (req_url.includes('{{ChildAccount}}')) {",
					"        var ChildAccount = pm.globals.get('ChildAccount');",
					"        req_url = req_url.replace(/{{ChildAccount}}/g, ChildAccount);",
					"        // console.log(\"Updated URL (ChildAccount):\", req_url);",
					"    }",
					"",
					"    // Check if the request URL includes '{{ChildAccount}}'",
					"        if (req_url.includes('{{integrationName}}')) {",
					"        var integrationName = pm.globals.get('integrationName');",
					"        req_url = req_url.replace(/{{integrationName}}/g, integrationName);",
					"        // console.log(\"Updated URL (integrationName):\", req_url);",
					"    }",
					"",
					"    // Check if the request URL includes '{{temp_policy_key}}'",
					"        if (req_url.includes('{{temp_policy_key}}')) {",
					"        var temp_policy_key = pm.globals.get('temp_policy_key');",
					"        // console.log(\"temp_policy_key:\", temp_policy_key);",
					"            ",
					"        // Replace '{{ChildAccount}}' in req_url with the value of ChildAccount",
					"        req_url = req_url.replace('{{temp_policy_key}}', temp_policy_key);",
					"        // console.log(\"Updated URL:\", req_url);",
					"    }",
					"",
					"    // Check if the request URL includes '{{temp_policy_key_b}}'",
					"    if (req_url.includes('{{temp_policy_key_b}}')) {",
					"    var temp_policy_key_b = pm.globals.get('temp_policy_key_b');",
					"    // console.log(\"temp_policy_key_b:\", temp_policy_key_b);",
					"            ",
					"    // Replace '{{ChildAccount}}' in req_url with the value of ChildAccount",
					"    req_url = req_url.replace('{{temp_policy_key_b}}', temp_policy_key_b);",
					"    // console.log(\"Updated URL:\", req_url);",
					"    }",
					"",
					"    // Check if the request URL includes '{{username}}'",
					"        if (req_url.includes('{{username}}')) {",
					"        var username = pm.globals.get('username');",
					"        req_url = req_url.replace(/{{username}}/g, username);",
					"        // console.log(\"Updated URL (username):\", req_url);",
					"    }",
					"",
					"        // Check if the request URL includes '{{email}}'",
					"        if (req_url.includes('{{email}}')) {",
					"        var email = pm.globals.get('email');",
					"        req_url = req_url.replace(/{{email}}/g, email);",
					"        // console.log(\"Updated URL (email):\", req_url);",
					"    }",
					"",
					"        // Check if the request URL includes '{{email}}'",
					"        if (req_url.includes('{{next_offset}}')) {",
					"        var next_offset = pm.globals.get('next_offset');",
					"        req_url = req_url.replace(/{{next_offset}}/g, next_offset);",
					"        // console.log(\"next_offset (next_offset):\", next_offset);",
					"    }",
					"",
					"        // Check if the request URL includes '{{group_idl}}'",
					"        if (req_url.includes('{{group_id}}')) {",
					"        var group_id = pm.globals.get('group_id');",
					"        req_url = req_url.replace(/{{group_id}}/g, group_id);",
					"        // console.log(\"group_id (group_id):\", group_id);",
					"}",
					"",
					"// Parse the query string from the request url",
					"    var q_str = URL.parse(req_url).query;",
					"",
					"    // Check if the query string is null. If it is, set it to an empty string",
					"        if (q_str == null) {",
					"        q_str = \"\";",
					"}",
					"",
					"// Parse the path from the request url, remove the leading '/', then rejoin the path",
					"//Replace variables in path",
					"    var path = decodeURIComponent(URL.parse(request.url).pathname).split(\"/\");",
					"    path = path.slice(1);",
					"    path = path.join('/');",
					"    path = '/' + path;",
					"",
					"    // Check if the path contains '{{temp_integration_key}}'",
					"        if (path.includes('{{temp_integration_key}}')) {",
					"            // Get the 'temp_integration_key' value from Postman collection variables",
					"            var temp_integration_key = pm.globals.get('temp_integration_key');",
					"            ",
					"            // Replace '{{temp_integration_key}}' in the path with the actual integration key",
					"            path = path.replace('{{temp_integration_key}}', temp_integration_key);",
					"            // console.log(\"Updated path:\", path);",
					"    }",
					"",
					"            // Check if the path contains '{{temp_integration_key_b}}'",
					"        if (path.includes('{{temp_integration_key_b}}')) {",
					"            // Get the 'temp_integration_key_b' value from Postman collection variables",
					"            var temp_integration_key_b = pm.globals.get('temp_integration_key_b');",
					"            ",
					"            // Replace '{{temp_integration_key_b}}' in the path with the actual integration key",
					"            path = path.replace('{{temp_integration_key_b}}', temp_integration_key_b);",
					"            // console.log(\"Updated path:\", path);",
					"    }",
					"",
					"    // Check if the path contains '{{user_id}}'",
					"        if (path.includes('{{user_id}}')) {",
					"            // Get the 'user_id' value from Postman collection variables",
					"            var user_id = pm.globals.get('user_id');",
					"            ",
					"            // Replace '{{user_id}}' in the path with the actual user id.",
					"            path = path.replace('{{user_id}}', user_id);",
					"            // console.log(\"Updated path:\", path);",
					"    }",
					"",
					"        // Check if the path contains '{{global_policy_key}}'",
					"        if (path.includes('{{global_policy_key}}')) {",
					"            // Get the 'global_policy_key' value from Postman collection variables",
					"            var global_policy_key = pm.globals.get('global_policy_key');",
					"            ",
					"            // Replace '{{user_id}}' in the path with the actual user id.",
					"            path = path.replace('{{global_policy_key}}', global_policy_key);",
					"            // console.log(\"Updated path:\", path);",
					"}",
					"",
					"pm.globals.set(\"hmacAuthHeader\", getAuthHeader(request.method, hostname, path, q_str, request.data, duo_auth_ver));",
					"",
					"pm.request.headers.add({key: 'Date', value: \"{{timestampHeader}}\" })",
					"pm.request.headers.add({key: 'Authorization', value: \"{{hmacAuthHeader}}\" })"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.unset(\"timestampHeader\");",
					"pm.globals.unset(\"hmacAuthHeader\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "child_account_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "child_account_account_id",
			"value": ""
		},
		{
			"key": "child_auth_api_ikey",
			"value": "",
			"type": "string"
		},
		{
			"key": "child_auth_api_skey",
			"value": "",
			"type": "string"
		},
		{
			"key": "child_auth_api_host",
			"value": "",
			"type": "string"
		},
		{
			"key": "child_auth_api_matrix",
			"value": ""
		}
	]
}