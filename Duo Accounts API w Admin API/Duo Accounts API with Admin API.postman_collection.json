{
	"info": {
		"_postman_id": "3dd5c5c9-f24c-40d3-a136-3e99d4dc9999",
		"name": "3. Duo Accounts API with Admin API",
		"description": "This collection makes use of the [Duo Accounts API with Admin API](https://duo.com/docs/accountsapi#using-accounts-api-with-admin-api). While Duo's Admin API supports programmatic administration of Duo account objects, such as users, 2FA devices, integrations, logs, and more. You can use an Accounts API application created at the parent account level to manage and query child accounts on the same deployment with Admin API by specifying the child account's API host in the request and the child account's ID in the list of API request parameters as account_id.\n\n- Here's an example API request to retrieve users using the Admin API:\n    - `GET` /admin/v1/integrations\n- Here's an example API request to retrieve users from a specific Duo account using the Accounts API with the Admin API.\n    - `GET` /admin/v1/users?account_id=DAJKIKMAKLQ2ZKD571XXX\n\nIn this collection, we've designed a workflow that iterates over your complete list of child accounts (utilizing the `duoChildAccounts` variable) to retrieve data from the followig Duo endpoints, and more.\n\n- [Users](https://duo.com/docs/adminapi#users)\n- [Endpoints](https://duo.com/docs/adminapi#endpoints)\n- [Phones](https://duo.com/docs/adminapi#phones)\n- [Hardware Tokens](https://duo.com/docs/adminapi#tokens)\n- [Integrations](https://duo.com/docs/adminapi#integrations)\n- [Accounts Settings](https://duo.com/docs/adminapi#settings)\n- [Authentication Logs](https://duo.com/docs/adminapi#logs)\n- [Authentication Attempts Report](https://duo.com/docs/adminapi#authentication-attempts-report)\n- [Users with Authetication Attemtpts](https://duo.com/docs/adminapi#users-with-authentication-attempts-report)\n- [Telephony Credits Used Reports](https://duo.com/docs/adminapi#telephony-credits-used-report)\n    \n\n#### 🚀 Getting started with this collection\n\n**Step 1**(If necessary)**:** Refer to the Duo Accounts API collection, and ensure the Accounts API request credentials have been populated in the global variables before continuing.\n\n**Step 2:** To call an individual endpoint, select the request, and click the **Send** button in the request window. You should see individual Duo API responses from each account in the `duoChildAccounts` array.\n\nAlternatively, you can run these request en masse via the [Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/) in Postman. To use the Collection Runner, click the three dots next to the **Duo Accounts API with Admin API** collection, and select **Run Collection.** In the Collection Runner**,** select **Run Duo Accoutns API with Admin API.** You should see responses for each child account for each endpoint in the list.\n\n#### 🔍 Variable Reference\n\nBelow is a list of variables defined within this collection. Some variables are dynamically generated during API interactions, while others need to be manually configured.\n\nSee [Using Variables](https://desktop.postman.com/?desktopVersion=10.15.0&webVersion=10.15.8-ui-230706-0915&userId=27165404&teamId=5021990) for further insight on variable use in Postman\n\n| Variable Name | Description | Scope |\n| --- | --- | --- |\n| accounts_api_ikey | Your Accounts API Integration Key. This needs to be manually set in the global variables | Global |\n| accounts_api_skey | Your Accounts API Secret Key. This needs to be manually set in the global variables | Global |\n| accounts_api_host | Your Accounts API Hostname. This needs to be manually set in the global variables | Global |\n| timestampHeader | The current date-time in RFC 2822 format, used as the \"Date\" header in Duo API requests. Set dynamically during the creation of the authorization header | Global |\n| hmacAuthHeader | Contains the HMAC-SHA1 signature for Duo API requests, which acts as the HTTP password in Duo's HTTP Basic Authentication. Unique for each request and dynamically generated by the getAuthHeader function | Global |\n| duoChildAccounts | Stores an object mapping between account IDs and their respective account names, providing a reference for pairing these two variables. Dynamically set in the pre-request script of this collection | Global |\n| accountId | Used to store the account ID of the child account currently being processed. This variable is dynamically set from the ChildAccountIds array during the processing cycle | Global |\n| next_offset | Used to manage pagination in the Duo API requests. It's pulled from the API response's metadata and signifies the offset for the subsequent set of data. If additional data is to be retreived from the currently processed account, next_offset is updated with the new value; otherwise, it is reset to 0. | Global |\n| mintime | Determines the lower boundary for the Unix timestamp in milliseconds for returned records. This needs to be manually set in the collection variables | Collection |\n| maxtime | Determines the upper boundary for the Unix timestamp in milliseconds for returned records. This needs to be manually set in the collection variables | Collection |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165404",
		"_collection_link": "https://duomsp.postman.co/workspace/Duo-MSP-API-Playground~c7115430-1cbf-4f66-9ded-2a737488a755/collection/27165404-3dd5c5c9-f24c-40d3-a136-3e99d4dc9999?action=share&source=collection_link&creator=27165404"
	},
	"item": [
		{
			"name": "Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/users?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Groups",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/groups?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Phones",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/phones?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Hardware Tokens",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/tokens?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Bypass Codes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/bypass_codes?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "WebAuthn Credentials",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/webauthncredentials?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Desktop Authenticators",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/desktop_authenticators?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Registered Devices",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/registered_devices?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Integrations (V2)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") === -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    // Check if requestBody is not empty\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        var jsonDataString = JSON.stringify(requestBody);\r",
							"        jsonDataString = replaceAllVariables(jsonDataString);\r",
							"        requestBody = JSON.parse(jsonDataString);\r",
							"        for (var parameter in requestBody) {\r",
							"            params_unsorted = parameter + \"=\" + requestBody[parameter];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var CryptoJS = require('crypto-js');\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    } else {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    }\r",
							"\r",
							"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);\r",
							"\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"function replaceAllVariables(str) {\r",
							"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;\r",
							"    return str.replace(variableRegex, function(match, variableName) {\r",
							"        return pm.variables.get(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v2/integrations?mintime=1613722194760&maxtime=1614722194860&account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Authentication Logs (V2)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") === -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    // Check if requestBody is not empty\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        var jsonDataString = JSON.stringify(requestBody);\r",
							"        jsonDataString = replaceAllVariables(jsonDataString);\r",
							"        requestBody = JSON.parse(jsonDataString);\r",
							"        for (var parameter in requestBody) {\r",
							"            params_unsorted = parameter + \"=\" + requestBody[parameter];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var CryptoJS = require('crypto-js');\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    } else {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    }\r",
							"\r",
							"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);\r",
							"\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"function replaceAllVariables(str) {\r",
							"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;\r",
							"    return str.replace(variableRegex, function(match, variableName) {\r",
							"        return pm.variables.get(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v2/logs/authentication?mintime=1613722194760&maxtime=1614722194860&account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Activity Logs (V2)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") === -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    // Check if requestBody is not empty\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        var jsonDataString = JSON.stringify(requestBody);\r",
							"        jsonDataString = replaceAllVariables(jsonDataString);\r",
							"        requestBody = JSON.parse(jsonDataString);\r",
							"        for (var parameter in requestBody) {\r",
							"            params_unsorted = parameter + \"=\" + requestBody[parameter];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var CryptoJS = require('crypto-js');\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    } else {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    }\r",
							"\r",
							"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);\r",
							"\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"function replaceAllVariables(str) {\r",
							"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;\r",
							"    return str.replace(variableRegex, function(match, variableName) {\r",
							"        return pm.variables.get(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v2/logs/activity?mintime=1613722194760&maxtime=1614722194860&account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Policies Summary (V2)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") === -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    // Check if requestBody is not empty\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        var jsonDataString = JSON.stringify(requestBody);\r",
							"        jsonDataString = replaceAllVariables(jsonDataString);\r",
							"        requestBody = JSON.parse(jsonDataString);\r",
							"        for (var parameter in requestBody) {\r",
							"            params_unsorted = parameter + \"=\" + requestBody[parameter];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var CryptoJS = require('crypto-js');\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    } else {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    }\r",
							"\r",
							"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);\r",
							"\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"function replaceAllVariables(str) {\r",
							"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;\r",
							"    return str.replace(variableRegex, function(match, variableName) {\r",
							"        return pm.variables.get(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v2/policies/summary?mintime=1613722194760&maxtime=1614722194860&account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Policies (V2)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") === -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    // Check if requestBody is not empty\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        var jsonDataString = JSON.stringify(requestBody);\r",
							"        jsonDataString = replaceAllVariables(jsonDataString);\r",
							"        requestBody = JSON.parse(jsonDataString);\r",
							"        for (var parameter in requestBody) {\r",
							"            params_unsorted = parameter + \"=\" + requestBody[parameter];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var CryptoJS = require('crypto-js');\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    } else {\r",
							"        requestData += \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");\r",
							"    }\r",
							"\r",
							"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);\r",
							"\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"function replaceAllVariables(str) {\r",
							"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;\r",
							"    return str.replace(variableRegex, function(match, variableName) {\r",
							"        return pm.variables.get(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v2/policies?mintime=1613722194760&maxtime=1614722194860&account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Endpoints",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/endpoints?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Account Settings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/settings?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Account Summary",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/info/summary?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Authentication Attempts Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/info/authentication_attempts?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Users w/ Authentication Attempts Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/info/user_authentication_attempts?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		},
		{
			"name": "Telephony Credits Used Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Variable Declaration\r",
							"var DuoChildAccounts = JSON.parse(pm.globals.get(\"duoChildAccounts\"));\r",
							"\r",
							"// Get HMAC authentication header\r",
							"function getAuthHeader(httpMethod, requestUrl, requestBody, apiHostname) {\r",
							"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); // Accounts API IKEY\r",
							"    var SKEY = pm.globals.get(\"accounts_api_skey\"); // Accounts API SKEY\r",
							"    var AUTH_TYPE = 'HMAC-SHA1';\r",
							"\r",
							"    if (requestUrl.indexOf(\"?\") == -1) {\r",
							"        requestUrl += \"?\";\r",
							"    }\r",
							"\r",
							"    var paramsStart = requestUrl.indexOf(\"?\");\r",
							"    var hostname_length = apiHostname.length + 8;\r",
							"    var api_call = requestUrl.slice(hostname_length, paramsStart);\r",
							"\r",
							"    var params_unsorted = \"\";\r",
							"    var params_array = [];\r",
							"\r",
							"    if (Object.keys(requestBody).length !== 0) {\r",
							"        for (var parameter1 in requestBody) {\r",
							"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];\r",
							"            params_array.push(params_unsorted);\r",
							"        }\r",
							"    } else {\r",
							"        params_unsorted = requestUrl.substring(paramsStart + 1);\r",
							"        params_array = params_unsorted.split(\"&\");\r",
							"    }\r",
							"\r",
							"    params_array.sort();\r",
							"    var encoded_params = \"\";\r",
							"    if (params_array[0] !== \"\") {\r",
							"        var encoded_params_array = params_array.map(urlEncodeParams);\r",
							"        encoded_params = encoded_params_array.join(\"&\");\r",
							"    }\r",
							"\r",
							"    var moment = require('moment');\r",
							"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");\r",
							"    pm.globals.set(\"timestampHeader\", timestamp);\r",
							"\r",
							"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params;\r",
							"    var CryptoJS = require('crypto-js');\r",
							"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);\r",
							"    var prebase = IKEY + \":\" + hmacDigest;\r",
							"    var btoa = require('btoa');\r",
							"    var baseComplete = btoa(prebase);\r",
							"    var authHeader = \"Basic \" + baseComplete;\r",
							"    return authHeader;\r",
							"}\r",
							"\r",
							"function urlEncodeParams(value, index, array) {\r",
							"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);\r",
							"}\r",
							"\r",
							"var keys = Object.keys(DuoChildAccounts);\r",
							"processAccount(keys, 0);\r",
							"\r",
							"function processAccount(keys, index) {\r",
							"    if (index >= keys.length) {\r",
							"        // All accounts have been processed\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let accountId = keys[index];\r",
							"    if (accountId && accountId.trim() !== \"\") {\r",
							"        pm.globals.set(\"accountId\", accountId);\r",
							"        var accountDetails = DuoChildAccounts[accountId];\r",
							"        var accountName = accountDetails.name;\r",
							"        var apiHostname = accountDetails.apiHostname; // Get the apiHostname for the current account\r",
							"\r",
							"        // Update the URL to use the specific apiHostname\r",
							"        var urlWithAccountId = `https://${apiHostname}/admin/v1/info/telephony_credits_used?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;\r",
							"\r",
							"        // Generate the HMAC header using the specific apiHostname\r",
							"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: urlWithAccountId,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),\r",
							"                \"Date\": pm.globals.get(\"timestampHeader\")\r",
							"            },\r",
							"            body: {}\r",
							"        }, function(err, res) {\r",
							"            if (res.code === 200) {\r",
							"                var resJson = res.json();\r",
							"                var users = resJson.response || [];\r",
							"        \r",
							"                // Process users as needed\r",
							"                // Example: console.log(\"Number of users for account\", accountName, \":\", users.length);\r",
							"\r",
							"                if (resJson.metadata && resJson.metadata.next_offset) {\r",
							"                    // If there are more users, set the next offset and recurse with the same account\r",
							"                    pm.globals.set('next_offset', resJson.metadata.next_offset);\r",
							"                    processAccount(keys, index);\r",
							"                } else {\r",
							"                    // If all users have been processed for this account, reset the next offset and recurse with the next account\r",
							"                    pm.globals.set('next_offset', 0);\r",
							"                    processAccount(keys, index + 1);\r",
							"                }\r",
							"            } else {\r",
							"                console.error('Request failed for account:', accountName, '; Error:', err, '; Response:', res);\r",
							"                // Move to the next account in case of an error\r",
							"                processAccount(keys, index + 1);\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.unset(\"timestampHeader\");",
							"    pm.globals.unset(\"hmacAuthHeader\");",
							"    pm.globals.unset(\"accountId\");",
							"    pm.globals.unset(\"next_offset\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Date",
						"value": "{{timestampHeader}}"
					},
					{
						"key": "Authorization",
						"value": "{{hmacAuthHeader}}"
					}
				],
				"url": {
					"raw": "{{duo_url}}",
					"host": [
						"{{duo_url}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Returns a paged list of users. To fetch all results, call repeatedly with the `offset` parameter as long as the result metadata has a `next_offset` value. If `username` is not provided, the list will contain all users. If `username` is provided, the list will either contain a single user (if a match was found) or no users. Requires \"Grant read resource\" API permission."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Generate the authorization header",
					"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
					"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); //Auth or Admin API IKEY",
					"    var SKEY = pm.globals.get(\"accounts_api_skey\"); //Auth or Admin API SKEY",
					"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\"); //Auth or Admin API Hostname",
					"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
					"",
					"    // Check if the API hostname is defined. If not, throw an error.",
					"    if (!API_HOSTNAME) {",
					"        throw new Error(\"API_HOSTNAME is not defined\");",
					"    }",
					"     ",
					"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
					"    if (requestUrl.indexOf(\"?\") == -1) {",
					"        requestUrl += \"?\";",
					"    }",
					"",
					"    // Get the index of the start of the query parameters in the URL ",
					"    var paramsStart = requestUrl.indexOf(\"?\");",
					"",
					"    // Calculate the length of the hostname",
					"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
					"",
					"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
					"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
					"     ",
					"    // Clean up api_call by removing any unwanted characters",
					"    api_call = api_call.replace(\"}}\", \"\");",
					"    // console.log('api_call:', api_call);",
					"",
					"    var params_unsorted = \"\";",
					"    var params_array = [];",
					"    //Create unsorted array of parameters from either URL or Body",
					"    //Assuming POST parameters are in the Body, GET paramters are in URL",
					"    //(technically it looks like POST can be in the URL as well)",
					"",
					"    // Depending on the HTTP method and the existence of a request body,",
					"    // extract the query parameters from the URL or the body into params_array",
					"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
					"        for (var parameter1 in requestBody) {",
					"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
					"            params_array.push(params_unsorted);",
					"        }",
					"    } else {",
					"        params_unsorted = requestUrl.substring(paramsStart+1);",
					"        params_array = params_unsorted.split(\"&\");",
					"    }",
					"     ",
					"    params_array.sort();                    //lexicographically sort parameters by key",
					"    var encoded_params = \"\";               ",
					"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
					"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
					"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
					"    }",
					"     ",
					"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
					"    var moment = require('moment');",
					"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"    pm.globals.set(\"timestampHeader\",timestamp);",
					" ",
					"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
					"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
					"    // console.log(requestData);",
					" ",
					"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
					"    var CryptoJS = require('crypto-js');",
					"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
					"     ",
					"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
					"    var prebase = IKEY+\":\"+ hmacDigest;",
					"    // console.log(\"prebase:\", prebase)",
					"     ",
					"    //encodes a string in base-64",
					"    var btoa = require('btoa');",
					"    var baseComplete = btoa(prebase);",
					"",
					"    var authHeader = \"Basic \"+ baseComplete;",
					"    return authHeader;",
					"}",
					"",
					"// URL encode parameters",
					"function urlEncodeParams(value, index, array) {",
					"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
					"}",
					"",
					"// Get Accounts - Performing this request to pull the list of child accounts",
					"    var url1 = `https://${pm.globals.get(\"accounts_api_host\")}/accounts/v1/account/list`;",
					"",
					"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));",
					"",
					"    pm.sendRequest({",
					"    url: url1,",
					"    method: \"POST\",",
					"    header: {",
					"        \"Content-Type\": \"application/x-www-form-urlencoded\",",
					"        \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
					"        \"Date\": pm.globals.get(\"timestampHeader\")",
					"    },",
					"    body: {}",
					"    }, function(err, res) {",
					"    if (err) {",
					"        console.log(\"Error:\", err);",
					"        return;",
					"    }",
					"",
					"    try {",
					"        var responseJson = JSON.parse(res.text());",
					"        if (responseJson.stat === \"OK\") {",
					"            // Initialize an object to store the mapping",
					"            var duoChildAccounts = {};",
					"",
					"            for (var i = 0; i < responseJson.response.length; i++) {",
					"                var accountId = responseJson.response[i].account_id;",
					"                var accountName = responseJson.response[i].name;",
					"                var apiHostname = responseJson.response[i].api_hostname;",
					"",
					"                // Store the account ID, name, and API hostname mapping in duoChildAccounts",
					"                duoChildAccounts[accountId] = {",
					"                    name: accountName,",
					"                    apiHostname: apiHostname",
					"                };",
					"            }",
					"",
					"            // Save the mapping object as a global variable",
					"            pm.globals.set(\"duoChildAccounts\", JSON.stringify(duoChildAccounts));",
					"        } else {",
					"            console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
					"        }",
					"    } catch (error) {",
					"        console.log(\"Error parsing JSON:\", error);",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Remove the 'timestampHeader' global variable",
					"pm.globals.unset(\"timestampHeader\");",
					"",
					"// Remove the 'hmacAuthHeader' global variable",
					"pm.globals.unset(\"hmacAuthHeader\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "mintime",
			"value": "1613722194760",
			"type": "string"
		},
		{
			"key": "maxtime",
			"value": "1614722194860",
			"type": "string"
		},
		{
			"key": "user_id_mapping",
			"value": ""
		}
	]
}