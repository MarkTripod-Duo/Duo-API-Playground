{
	"info": {
		"_postman_id": "4c5fee39-da1f-48a4-b98c-5c359acca0b6",
		"name": "1. Duo Accounts API",
		"description": "This collection is designed to interact with the [Duo Accounts API](https://duo.com/docs/accountsapi). The Accounts API allows a Duo parent account administrator to create, manage, and delete Duo child accounts.\n\n#### üöÄ Getting started with this collection\n\n**Step 1:** Login to your Duo Admin Panel as an [Owner](https://duo.com/docs/admin-roles#duo-administrative-roles) of your MSP tenant, click **Application**s > **Protect an Application** and locate the entry for **Accounts API** in the applications list. Click **Protect** to the far-right to configure the application and make note of your integration key, secret key, and API hostname.\n\n**Step 2:** After creating the Accounts API in the Duo Admin Panel, return to Postman and navigate to **Environments** > **Globals**, and populate the following variables with their correspoding values.\n\n- `accounts_api_ikey`: Accounts API Integration Key\n    \n- `accounts_api_skey`: Accounts API Secret Key\n    \n- `accounts_api_host`: Accounts API API Hostname\n    \n\nYou should now be able to use any request within the **Duo Accounts API** collection.\n\nWithin this colllection, you'll find three individual API requests:\n\n- **Retrieve Accounts:** Retreives a list of child accounts and returrns their Account Name, Account ID, and API Hostname. These values are then stored as an object map in the`duoChildAccounts` global variable.\n    \n- **Create Account:** Creates a new child account beneath the parent\n    \n    - Requires the 'name' paramater. Please see the Params tab to include the name of the account you'd like to create.\n        \n- **Delete Account:** Deletes a child account beneath the parent\n    \n    - Requires the 'account_id' paramater. Please see the Params tab to include the Account ID of the account you'd like to delete. You can run the **Retrieve Accounts** request to get the Account ID if you don't have it already.\n        \n\n#### üí° Collection Note\n\nThe \"Retrieve Accounts\" request is integral to peforming other request in this workspace. This request allows Duo administrators to pull a list of all their child accounts. The returned child account IDs and account names are stored as an object mapping in the `duoChildAccounts` global variable. The `duoChildAccounts` variable is used in various other requests to perform mass operations accross a list of Duo child accounts.\n\nThese collections include but are not limited to the **Accounts API with the Admin API**, **Duo Onboarding**, and others. Each collection can use the `duoChildAccounts` variable to perform actions against a large list of child accounts, making the retrieval of child accounts an integral part of this workspace.\n\n#### üîç Variable Reference\n\nBelow is a list of variables defined within this collection. Some variables are dynamically generated during API interactions, while others need to be manually configured.\n\nSee [Using Variables](https://learning.postman.com/docs/sending-requests/variables/) for further insight on variable use in Postman\n\n| Variable Name | Description | Scope |\n| --- | --- | --- |\n| accounts_api_ikey | Your Accounts API Integration Key. This needs to be manually set in the global variables. | Global |\n| accounts_api_skey | Your Accounts API Secret Key. This needs to be manually set in the global variables. | Global |\n| accounts_api_host | Your Accounts API Hostname. This needs to be manually set in the global variables. | Global |\n| timestampHeader | The current date-time in RFC 2822 format, used as the \"Date\" header in Duo API requests. Set dynamically during the creation of the authorization header. | Global |\n| hmacAuthHeader | Contains the HMAC-SHA1 signature for Duo API requests, which acts as the HTTP password in Duo's HTTP Basic Authentication. Unique for each request and dynamically generated by the getAuthHeader function. | Global |\n| duoChildAccounts | Stores an object mapping between account IDs and their respective account and api-host names, providing a reference for pairing these two variables. Dynamically set by the \"Retrieve Accounts\" request. | Global |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165404",
		"_collection_link": "https://duomsp.postman.co/workspace/Duo-MSP-API-Playground~c7115430-1cbf-4f66-9ded-2a737488a755/collection/27165404-4c5fee39-da1f-48a4-b98c-5c359acca0b6?action=share&source=collection_link&creator=27165404"
	},
	"item": [
		{
			"name": "Retrieve Accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response as JSON",
							"var responseJson = pm.response.json();",
							"",
							"// Initialize an object to store the mapping",
							"var duoChildAccounts = {};",
							"",
							"for (var i = 0; i < responseJson.response.length; i++) {",
							"    var accountId = responseJson.response[i].account_id;",
							"    var accountName = responseJson.response[i].name;",
							"    var apiHostname = responseJson.response[i].api_hostname;",
							"    ",
							"    // Store the account ID, name, and API hostname in duoChildAccounts",
							"    duoChildAccounts[accountId] = {",
							"        name: accountName,",
							"        apiHostname: apiHostname",
							"    };",
							"}",
							"",
							"// Save the mapping object as a global variable",
							"pm.globals.set(\"duoChildAccounts\", JSON.stringify(duoChildAccounts));",
							"",
							"// Check the status code of the response",
							"var statusCode = responseJson.stat;",
							"",
							"if (statusCode === \"OK\") {",
							"    console.log(`Total Accounts: ${Object.keys(duoChildAccounts).length}`);",
							"    console.log(\"Account ID to Account Name and API Hostname mapping:\");",
							"    Object.keys(duoChildAccounts).forEach(accountId => {",
							"        var accountInfo = duoChildAccounts[accountId];",
							"        console.log(`Account ID: ${accountId}, Account Name: ${accountInfo.name}, API Hostname: ${accountInfo.apiHostname}`);",
							"    });",
							"    console.log(\"This mapping has been saved to the 'duoChildAccounts' global variable.\");",
							"} else {",
							"    console.log(\"Failed to save Account ID to Name and API Hostname mapping to the 'duoChildAccounts' global variable.\");",
							"}",
							"",
							"",
							"// Remove the 'timestampHeader' global variable",
							"pm.globals.unset(\"timestampHeader\");",
							"",
							"// Remove the 'hmacAuthHeader' global variable",
							"pm.globals.unset(\"hmacAuthHeader\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{accounts_api_host}}/accounts/v1/account/list",
					"protocol": "https",
					"host": [
						"{{accounts_api_host}}"
					],
					"path": [
						"accounts",
						"v1",
						"account",
						"list"
					]
				},
				"description": "Returns a list of child accounts."
			},
			"response": []
		},
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.json().stat;",
							"var accountName = pm.response.json().response.name;",
							"",
							"if (statusCode === \"OK\") {",
							"  console.log(accountName + \" has been created successfully.\");",
							"} else {",
							"  console.log(\"Failed to create the account.\");",
							"}",
							"",
							"// Remove the 'timestampHeader' global variable",
							"pm.globals.unset(\"timestampHeader\");",
							"",
							"// Remove the 'hmacAuthHeader' global variable",
							"pm.globals.unset(\"hmacAuthHeader\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{accounts_api_host}}/accounts/v1/account/create?name=",
					"protocol": "https",
					"host": [
						"{{accounts_api_host}}"
					],
					"path": [
						"accounts",
						"v1",
						"account",
						"create"
					],
					"query": [
						{
							"key": "name",
							"value": "",
							"description": "Required: Name for the new customer."
						}
					]
				},
				"description": "Create a new child account with `name` paramater defined in the system."
			},
			"response": []
		},
		{
			"name": "Delete Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.json().stat;",
							"// var accountName = pm.response.json().response.name;",
							"",
							"if (statusCode === \"OK\") {",
							"  console.log(\"Account has been deleted successfully.\");",
							"} else {",
							"  console.log(\"Failed to delete the account.\");",
							"}",
							"",
							"// Remove the 'timestampHeader' global variable",
							"pm.globals.unset(\"timestampHeader\");",
							"",
							"// Remove the 'hmacAuthHeader' global variable",
							"pm.globals.unset(\"hmacAuthHeader\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{accounts_api_host}}/accounts/v1/account/delete?account_id=",
					"protocol": "https",
					"host": [
						"{{accounts_api_host}}"
					],
					"path": [
						"accounts",
						"v1",
						"account",
						"delete"
					],
					"query": [
						{
							"key": "account_id",
							"value": "",
							"description": "Required: ID of the customer account to delete as returned by Retrieve Accounts. This is a 20 character string, for example DA9VZOC5X63I2W72NRP9."
						}
					]
				},
				"description": "Delete the account with a designated `account_id` from the system."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Generate the authorization header",
					"    function getAuthHeader(httpMethod, requestUrl, requestBody) {",
					"    // Ensure requestUrl is a string",
					"    requestUrl = String(requestUrl);",
					"",
					"    // Retrieve Accounts API IKEY, SKEY and API Hostname",
					"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); ",
					"    var SKEY = pm.globals.get(\"accounts_api_skey\"); ",
					"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\"); ",
					"",
					"    // Check if API_HOSTNAME is defined",
					"    if (!API_HOSTNAME) {",
					"        throw new Error(\"API_HOSTNAME is not defined\");",
					"    }",
					"",
					"    // Add a '?' to the end of the URL if it doesn't exist",
					"    if (requestUrl.indexOf(\"?\") === -1) {",
					"        requestUrl += \"?\";",
					"    }",
					"",
					"    // Calculate the starting point of the query parameters in the URL",
					"    var paramsStart = requestUrl.indexOf(\"?\");",
					"",
					"    // Calculate the length of the hostname",
					"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
					"",
					"    // Extract the Duo API endpoint",
					"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
					"    api_call = api_call.replace(\"}}\", \"\");",
					"",
					"    var params_unsorted = \"\";",
					"    var params_array = [];",
					"",
					"    // Depending on the HTTP method, extract parameters from URL or body",
					"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
					"        for (var parameter1 in requestBody) {",
					"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
					"            params_array.push(params_unsorted);",
					"        }",
					"    } else {",
					"        params_unsorted = requestUrl.substring(paramsStart+1);",
					"        params_array = params_unsorted.split(\"&\");",
					"    }",
					"",
					"    // Sort parameters lexicographically by key",
					"    params_array.sort();                    ",
					"    var encoded_params = \"\";",
					"",
					"    // If there are parameters, encode and join them",
					"    if (params_array[0] !== \"\"){",
					"        var encoded_params_array = params_array.map(urlEncodeParams);  ",
					"        encoded_params = encoded_params_array.join(\"&\");",
					"    }",
					"",
					"    // Get the current timestamp in the RFC 2822 format",
					"    var moment = require('moment');",
					"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"    pm.globals.set(\"timestampHeader\",timestamp);",
					" ",
					"    // Construct the string to be signed",
					"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
					" ",
					"    // Compute the HMAC-SHA1 signature",
					"    var CryptoJS = require('crypto-js');",
					"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
					"     ",
					"    // Construct the Auth header",
					"    var btoa = require('btoa');",
					"    var prebase = IKEY+\":\"+ hmacDigest;",
					"    var baseComplete = btoa(prebase);",
					"    var authHeader = \"Basic \"+ baseComplete;",
					"",
					"    return authHeader;",
					"}",
					"",
					"// URL encode parameters",
					"    function urlEncodeParams(value, index, array) {",
					"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
					"}",
					"",
					"// Set the authorization header",
					"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(pm.request.method, pm.request.url, pm.request.body))",
					";",
					"",
					"// Add the request headers",
					"    pm.request.headers.add({key: 'Date', value: \"{{timestampHeader}}\" });",
					"    pm.request.headers.add({key: 'Authorization', value: \"{{hmacAuthHeader}}\" });",
					"    pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded' ",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "duoChildAccounts",
			"value": ""
		}
	]
}