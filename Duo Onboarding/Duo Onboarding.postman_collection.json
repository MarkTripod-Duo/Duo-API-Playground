{
	"info": {
		"_postman_id": "08585d4d-8dfa-421a-85a2-832cc2ac52af",
		"name": "6. Duo Onboarding",
		"description": "This collection is designed to help perform some of initial onboarding processes for a new Duo client account. The collection includes requests for creating an account, updating settings, creating integrations, creating and applying policies, enrolling users, and more.\n\nFor more insight into the specific requirements and usage of each collection of requests, please refer to documentation found within each folder.\n\n- Account Setup\n    - Create Account (name the account)\n    - Modify Edition\n    - Modify Settings\n    - Modify Custom Branding\n    - Modify Custom Messaging\n- Application Management\n    - Create Integration\n- User Enrollment\n    - Create Group\n    - Enroll Users\n- Policy Management\n    - Retrieve Global Policy\n    - Update Global Policy\n    - Aplly Policy\n- User Management\n    - Retrieve enrollment status\n    - Assigned enrolled users to group\n- Clean Up\n    - Clear Variables\n        - This request cleans up all of the created global variables\n\n#### üöÄ Getting started with this collection\n\nNote: If you haven't already, head over to the **Accounts API** collection and setup the necessary prerequisites. Once you've complete the prerequistes, please follow the steps below.\n\n**Step 1:** Navigate to **Duo Onboarding** > **Variables** , and input the desired account name under the `newChildAccount` collection variable. Keep the format as \\[\"New Child Account\"\\] and only replace the text within the double quotes and brackets. Example: \\[\"Block Buster\"\\]\n\n**Step 2** (Optional): We've built in a capability that allows you to enroll a CSV list of users. The CSV list should contain two column headers: 'username' and 'email', followed by the respective username and email address of each user you wish to enroll. To define this in the workspace, navigate to **Duo Onboarding** > **Variables** , and input the CSV list to the `usersCsv` variable.\n\n**Step 3**: Each request within the collection has it's own paramater and configuration reqiurements. Please ensure to define these according to your needs before executing each request. For detailed information on what is required, refer to the documentation provided in the corresponding folder of each section, and/or the relevant Duo API documentation.\n\n**Step 4**: Once you've defined the configuratoin according to your requirements, it's best to run the requests in sequential order via the [Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/), however these request can be run individually. Please note, however, that some requests depend on other requests to be run beforehand. Consult the Request Dependency Matrix for further insight.\n\n#### ‚öôÔ∏è Request Dependency Matrix\n\nThis table provides an overview of the various requests within this collection. It outlines each request, its purpose, and any dependent requests it may rely on for successful execution.\n\n| Request | Description | Dependencies |\n| --- | --- | --- |\n| [Create Account](https://duo.com/docs/accountsapi#create-account) | Creates a new Duo customer account | None |\n| [Modify Edition](https://duo.com/docs/accountsapi#set-edition) | Sets the effective Duo edition for a child account | Create Account |\n| [Modify Settings](https://duo.com/docs/adminapi#modify-settings) | Change global Duo settings | Create Account |\n| [Modify Custom Branding](https://duo.com/docs/adminapi#modify-live-custom-branding) | Change effective custom branding settings | Create Account |\n| [Modify Custom Messaging](https://duo.com/docs/adminapi#modify-custom-messaging) | Updates current custom messaging settings, shown to users in the Universal Prompt | Create Account |\n| [Create Integration A](https://duo.com/docs/adminapi#create-integration) | Creates a new integration. The new integration key and secret key are randomly generated and returned in the response | Create Account |\n| [Create Integration B](https://duo.com/docs/adminapi#create-integration) | Creates a new integration. The new integration key and secret key are randomly generated and returned in the response | Create Account |\n| [Create Group](https://duo.com/docs/adminapi#create-group) | Create a new group | Create Account |\n| [Enroll Users](https://duo.com/docs/adminapi#enroll-user) | Enroll a user with user name username and email address email and send them an enrollment email that expires after valid_secs seconds | Create Account |\n| [Retrieve Global Policy](https://duo.com/docs/adminapi#retrieve-policies) | Retrieve a complete set of all policies. Includes all policy section data for each policy. | Create Account |\n| [Update Global Policy](https://duo.com/docs/adminapi#update-policy) | Change an existing policy's name, add or remove policy sections, or update keys/values for the policy with the specified policy_key | Create Account, Retrieve Global Policy |\n| [Create Policy A](https://duo.com/docs/adminapi#create-policy) | Creates a new custom policy with the name specified in the parameters | Create Account, Create Integration A |\n| [Create Policy B](https://duo.com/docs/adminapi#create-policy) | Creates a new custom policy with the name specified in the parameters | Create Account, Create Integration B |\n| [Retrieve Enrollment Status](https://duo.com/docs/adminapi#retrieve-users) | Retrieves user enrollment status (Retrieve Users > is_enrolled: true or false) | Create Account, Enroll Users |\n| [Assign Enrolled Users to Group](https://duo.com/docs/adminapi#associate-group-with-user) | Associate a group with ID group_id with the user with ID user_id | Create Account, Retrieve Enrollment Status |\n\n#### üîç Variable Reference\n\nBelow is a list of variables defined and used within this collection. Some variables are dynamically generated during API calls, while others need to be manually configured.\n\nSee [Using Variables](https://learning.postman.com/collection-format/advanced-concepts/variables/) for further insight on variable use in Postman\n\n| Variable Name | Description | Scope |\n| --- | --- | --- |\n| accounts_api_ikey | Your Accounts API Integration Key. This needs to be manually set in the global variables. | Global |\n| accounts_api_skey | Your Accounts API Secret Key. This needs to be manually set in the global variables. | Global |\n| accounts_api_host | Your Accounts API Hostname. This needs to be manually set in the global variables. | Global |\n| newChildAccount | Defines the name of the new Duo account. | Collection |\n| usersCsv | Defines a CSV list for user enrollment, containing 'username' and 'email' for each entry. | Collection |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165404",
		"_collection_link": "https://duomsp.postman.co/workspace/Duo-MSP-API-Playground~c7115430-1cbf-4f66-9ded-2a737488a755/collection/27165404-08585d4d-8dfa-421a-85a2-832cc2ac52af?action=share&source=collection_link&creator=27165404"
	},
	"item": [
		{
			"name": "Account Setup",
			"item": [
				{
					"name": "Create Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"var responseData = JSON.parse(pm.response.text());",
									"",
									"// Extract the account ID and API Hostname",
									"var account_id = responseData.response.account_id;",
									"var api_hostname = responseData.response.api_hostname",
									"//var name = responseData.response.name",
									"// console.log(api_hostname) ",
									"",
									"// Set the account ID as a collection variable",
									"pm.globals.set(\"child_account_account_id\", account_id);",
									"pm.globals.set(\"child_account_api_hostname\", api_hostname)",
									"//pm.globals.set(\"ChildAccount\", name)",
									"var ChildAccount = pm.globals.get(\"newChildAccount\", ChildAccount);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code === 200) {",
									"        console.log(pm.globals.get('newChildAccount') + ' was created successfully');",
									"    } else {",
									"        console.log('There was an issue creating the account: ' + pm.globals.get('newChildAccount'));",
									"    }",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/accounts/v1/account/create?name={{newChildAccount}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"accounts",
								"v1",
								"account",
								"create"
							],
							"query": [
								{
									"key": "name",
									"value": "{{newChildAccount}}",
									"description": "DO NOT CHANGE"
								}
							]
						},
						"description": "Creates a new child account.\n\nIn order to leverage this request, you need to populate the `newChildAccount` collection variable with the name of the account you would like to create.\n\n**Note:** _**Do not remove the {{ChildAccount}} variable designation from the 'name' params in the request. Doing so can result in failed requests. Instead make the change to the newChildAccount variable within this collection.**_"
					},
					"response": []
				},
				{
					"name": "Modify Edition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the response code from the response object",
									"var responseBody = pm.response.json();",
									"var stat = responseBody.stat;",
									"var responseCode = pm.response.code;",
									"",
									"// Get the URL from the request",
									"var url = pm.request.url;",
									"",
									"// Extract the edition parameter from the URL",
									"var edition = pm.request.url.query.get('edition');",
									"",
									"//Get account name",
									"// var accountId = pm.collectionVariables.get('account_id');",
									"var newChildAccount= pm.globals.get(\"newChildAccount\", newChildAccount);",
									"",
									"// Perform actions based on the edition",
									"if ((responseCode === 200 || stat === \"OK\") && edition === \"ENTERPRISE\") {",
									"    console.log(`Edition updated to Duo Essentials successfully for ${newChildAccount}`);",
									"} else if ((responseCode === 200 || stat === \"OK\") && edition === \"PLATFORM\") {",
									"    console.log(`Edition updated to Duo Advantage successfully for ${newChildAccount}`);",
									"} else if ((responseCode === 200 || stat === \"OK\") && edition === \"BEYOND\") {",
									"    console.log(`Edition updated to Duo Premier successfully for ${newChildAccount}`);",
									"} else {",
									"    console.log(\"Edition not recognized\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/billing/edition?account_id={{child_account_account_id}}&edition=PLATFORM",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"billing",
								"edition"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								},
								{
									"key": "edition",
									"value": "PLATFORM",
									"description": "The edition to set. This should be one of:\nENTERPRISE = Duo Essentials edition.\nPLATFORM = Duo Advantage edition.\nBEYOND = Duo Premier edition."
								}
							]
						},
						"description": "Sets the effective [Duo edition](https://duo.com/editions-and-pricing) for a child account.\n\nThis should be one of:\n\n- `ENTERPRISE` - Duo Essentials edition.\n    \n- `PLATFORM` - Duo Advantage edition.\n    \n- `BEYOND` - Duo Premier edition."
					},
					"response": []
				},
				{
					"name": "Modify Settings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Account ID",
									"var accountId = pm.collectionVariables.get('account_id');",
									"var newChildAccount= pm.globals.get(\"newChildAccount\", newChildAccount);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log(`Account settings updated successfully for ${newChildAccount}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/settings?caller_id=12485552794&email_activity_notification_enabled=true&fraud_email=test@company.com&fraud_email_enabled=true&helpdesk_bypass=limit&helpdesk_bypass_expiration=30&helpdesk_can_send_enroll_email=true&inactive_user_expiration=30&keypress_confirm=3&keypress_fraud=0&language=EN&lockout_expire_duration=60&lockout_threshold=3&log_retention_days=365&minimum_password_length=20&password_requires_lower_alpha=true&password_requires_numeric=true&password_requires_special=true&password_requires_upper_alpha=true&push_activity_notification_enabled=true&sms_batch=5&sms_expiration=120&sms_message=Use these Duo SMS passcodes for 2FA authentication&sms_refresh=1&timezone=US/Eastern&user_managers_can_put_users_in_bypass=false&user_telephony_cost_max=30&account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"settings"
							],
							"query": [
								{
									"key": "caller_id",
									"value": "12485552794",
									"description": "Automated calls will appear to come from this number. This does not apply to text messages. Customizing this number may cause telephony providers to flag your number as fraudulent and result in failed user authentications.\n\nExample US number: \"12485552794\"\nExample Canadian number: \"14165557890\"\n"
								},
								{
									"key": "email_activity_notification_enabled",
									"value": "true",
									"description": "If true, users will receive an email notification when an authentication device is added or removed. If set to false, no email notifications are sent in these situations. Default value is false."
								},
								{
									"key": "fraud_email",
									"value": "test@company.com",
									"description": "The email address to be notified when a user reports a fraudulent authentication attempt or is locked out due to failed authentication attempts, or empty for all administrators will be notified. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared."
								},
								{
									"key": "fraud_email_enabled",
									"value": "true",
									"description": "Set to true to enable fraudulent authentication notification emails. False disables the fraud email functionality. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared."
								},
								{
									"key": "helpdesk_bypass",
									"value": "limit",
									"description": "Grants permission for administrators with the Help Desk role to generate bypass codes for users. The default value allow permits unrestricted generation of bypass codes, limit plus a value for helpdesk_bypass_expiration allows Help Desk admins to generate bypass codes with a preset expirtation, and deny prevents Help Desk admins from generating any bypass codes."
								},
								{
									"key": "helpdesk_bypass_expiration",
									"value": "30",
									"description": "Integer specifying a default expiration for bypass codes generated by Help Desk admins, in minutes. If not set, Help Desk admins may change bypass code expiration from the default 60 minutes after creation if helpdesk_bypass is set to allow. If specifying a value, also set helpdesk_bypass to limit."
								},
								{
									"key": "helpdesk_can_send_enroll_email",
									"value": "true",
									"description": "Permits Help Desk administrators to send or resend enrollment emails to users. Set to true to allow sending of enrollment emails. Default value is false."
								},
								{
									"key": "inactive_user_expiration",
									"value": "30",
									"description": "Users will be automatically deleted if they are inactive (no successful logins) for this number of days. Minimum: 30 Maximum: 365"
								},
								{
									"key": "keypress_confirm",
									"value": "3",
									"description": "The key for users to press to authenticate, or empty if any key should be pressed to authenticate. If this is empty, keypress_fraud must be as well."
								},
								{
									"key": "keypress_fraud",
									"value": "0",
									"description": "The key for users to report fraud, or empty if any key should be pressed to authenticate. If this is empty, keypress_confirm must be as well."
								},
								{
									"key": "language",
									"value": "EN",
									"description": "Sets the language used in the browser-based user authentication prompt. One of: \"EN\", \"DE\", \"FR\". Default: \"EN\""
								},
								{
									"key": "lockout_expire_duration",
									"value": "60",
									"description": "If non-zero, the time in minutes until a locked-out user's status reverts to \"Active\". If 0, a user remains locked out until their status is manually changed (By an admin or API call). Minimum: 5 Maximum: 30000"
								},
								{
									"key": "lockout_threshold",
									"value": "3",
									"description": "The number of consecutive failed authentication attempts before the user's status is set to \"Locked Out\" and the user is denied access. Default is 10 attempts. Minimum: 1 Maximum: 9999"
								},
								{
									"key": "log_retention_days",
									"value": "365",
									"description": "When set, log entries older than the specified number of days are purged. Logs retained indefinitely if null. Note that the log retention setting does not change the 180 day limitation for viewing and retrieving log information in the Duo Admin Panel, exported reports, or via this API. Default: null (no retention limit). Minimum: 1 day. Maximum: 365 days."
								},
								{
									"key": "minimum_password_length",
									"value": "20",
									"description": "The minimum number of characters that an administrator's Duo Admin Panel password must contain. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: 12. Minimum: 12 Maximum: 100"
								},
								{
									"key": "password_requires_lower_alpha",
									"value": "true",
									"description": "If true, administrator passwords will be required to contain a lower case alphabetic character. If false, administrator passwords will not be required to contain a lower case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
								},
								{
									"key": "password_requires_numeric",
									"value": "true",
									"description": "If true, administrator passwords will be required to contain a numeric character. If false, administrator passwords will not be required to contain a numeric character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
								},
								{
									"key": "password_requires_special",
									"value": "true",
									"description": "If true, administrator passwords will be required to contain a special (non-alphanumeric) character. If false, administrator passwords will not be required to contain a special (non-alphanumeric) character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
								},
								{
									"key": "password_requires_upper_alpha",
									"value": "true",
									"description": "If true, administrator passwords will be required to contain an upper case alphabetic character. If false, administrator passwords will not be required to contain an upper case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false."
								},
								{
									"key": "push_activity_notification_enabled",
									"value": "true",
									"description": "If true, users will receive a Duo Mobile notification when an authentication device is added or removed. If set to false, no email notifications are sent in these situations. Default value is false."
								},
								{
									"key": "sms_batch",
									"value": "5",
									"description": "The number of passcodes to send at one time, up to 10."
								},
								{
									"key": "sms_expiration",
									"value": "120",
									"description": "The time in minutes to expire and invalidate SMS passcodes, or empty if they should not expire."
								},
								{
									"key": "sms_message",
									"value": "Use these Duo SMS passcodes for 2FA authentication",
									"description": "Description sent with every batch of SMS passcodes."
								},
								{
									"key": "sms_refresh",
									"value": "1",
									"description": "If 1, a new set of SMS passcodes will automatically be sent after the last one is used. If 0, a new set will not be sent."
								},
								{
									"key": "telephony_warning_min",
									"value": "",
									"description": "Configure a alert to be sent when the account has fewer than this many telephony credits remaining.",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "US/Eastern",
									"description": "This is the timezone used when displaying timestamps in the Duo Admin Panel. Timezones must be entries in the IANA Time Zone Database, for example, \"US/Eastern\", \"Australia/Darwin\", \"GMT\"."
								},
								{
									"key": "user_managers_can_put_users_in_bypass",
									"value": "false",
									"description": "Permits User Manager administrators to apply \"Bypass\" status to users. Set to false to prevent User Managers from applying \"Bypass\" status. Default value is true."
								},
								{
									"key": "user_telephony_cost_max",
									"value": "30",
									"description": "The maximum number of telephony credits a user may consume in a single authentication event. This excludes Duo administrators authenticating to the Duo administration panel. If you know the countries from which your users expect to authenticate with phone callback we recommend adjusting this down from the default to match the most expensive expected country to help avoid misuse, using the values from the Telephony Credits documentation. Default: 20."
								},
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}"
								}
							]
						},
						"description": "Change global Duo settings on the target account."
					},
					"response": []
				},
				{
					"name": "Modify Custom Branding",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Account ID",
									"var accountId = pm.collectionVariables.get('account_id');",
									"var newChildAccount= pm.globals.get(\"newChildAccount\", newChildAccount);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log(`Account settings updated successfully for ${newChildAccount}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/branding?powered_by_duo=true&account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"branding"
							],
							"query": [
								{
									"key": "background_img",
									"value": "",
									"disabled": true
								},
								{
									"key": "card_accent_color",
									"value": "",
									"disabled": true
								},
								{
									"key": "logo",
									"value": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAhCAYAAACxzQkrAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2xJREFUeNpi/P//P8NgAozDykFubm4cQUCgqqqqLi4uLgYT/wAEj4Fg/fr161atWvWCLg6qra118AcCDg6OAjzKZpwFgvj4+Dk0dVB7e7uXLxAAmRlEKJ9xGQgiIyOnEWM2E6mOKSwsNCHBMSCQoQsEM2bMiKKJg1xdXV1IcAzcUSYmJqagNEdVB6WkpKjJycnJk5PmQGnNCwio6iCgL03ICB04UAMCqjqIn59fgJIyRkxMTJzaDuKjxEHAaOOgONuDchU0IYN9CEoLwHKPYffu3QynT59m0NTUZEhMTMTQN3/+fIbr168zmJqagjICg4AAOHBnPHr06CEfHx//mTNnThcUFKxD18dCyMXq6uqghNyOLNbW1sawfft2Bk9PT6yOAQGQeEtLC0NTUxPDs2fPGPLz88G5DWgWLLSiyYqy9+/ff0AXy8vLA9OfPn3Cq/fJkydg2sPDg+hoJRhC+/fv32dra9sBDPIKmBgPDw9DV1cXmMYHoqOjGYC1CwOwnsMovYFRdobsqgNU/gCL/ptYDCYZgNLfzp07HZubmw+QFWUGZs4cu26LakW3nGfYfvwJRY55+PwLQ0T1boaFh/4I6Fj4SZDsIJCmR3wxlR/Yjdd/Y1VgePTyG0UOOnb5FcMndl0GkHlPeCOKNS3DlEhy0Atu76Q/TLx1MP7tp18pctCtJwj9/xjZSl5zOUcQnaiVbLLtfnE5SiKL3X72B2duApVLSBUwg4yMDIa6By9/AklWOP8Xs7AkyJ57R6YeIuigb6yKOkAqB1ns9XdecDqQl0TkrnPnzjEAG2Aoevv6+himTZvGAMydKOnnzmt2dGtygPZcB9KEHfSDRUoRm3j6hJsMMwvU4Y76+vUrg7W1NbjEBpbA4LIJVEJ/+fIFRV/DghsMfxl4CNqD00HAOMZa73z6zY3iKFAoIIcE1lK7/QzDzdc8RNmDNVFjS/3ojorpvs8wc8MtvA45efU1g0f5WZyOQS5a8IbQP0YOLvT0gw7+AhPnwkP/GPZdOM2Q4C7J4Gkpg+KQ1QeeMBy7ywnkcRPKfDnfWaRnAukrRFUdhMDjT7wMzau/MHSvPc/Ay/6H4ecfJnAIMjBwkmUexQ6CJ85/nAw/vlNuDhPDIAODzkFYo4zzz9M7kl826dLLESD7hudgw4hwEECAAQBZWUqVhXCCqwAAAABJRU5ErkJggg",
									"disabled": true
								},
								{
									"key": "page_background_color",
									"value": "",
									"disabled": true
								},
								{
									"key": "powered_by_duo",
									"value": "true"
								},
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}"
								}
							]
						},
						"description": "Change global Duo settings on the target account."
					},
					"response": []
				},
				{
					"name": "Modify Custom Messaging",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Account ID",
									"var ChildAccount = pm.globals.get('newChildAccount');",
									"",
									"if (pm.response.code === 200) {",
									"    console.log(`Custom messaging updated successfully for ${ChildAccount}`);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/branding/custom_messaging?account_id={{child_account_account_id}}&help_links=https://help.duo.com/&help_text=If you are experiencing login issues, please contact our support team at https://help.duo.com&locale=en_US",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"branding",
								"custom_messaging"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								},
								{
									"key": "help_links",
									"value": "https://help.duo.com/",
									"description": "Optional: A comma-separated list of up to two custom external links shown to users in the Universal Prompt. Each URL must begin with http:// or https://."
								},
								{
									"key": "help_text",
									"value": "If you are experiencing login issues, please contact our support team at https://help.duo.com",
									"description": "Optional: Customized text string associated with the specified locale. The user's browser's preferred language settings determine which language to show in the Universal Prompt. The first locale and message text in the list matches the default language specified in global Settings and is also shown in the traditional web prompt and in the Duo Device Health app. Up to 200 characters. No support for hyperlinks."
								},
								{
									"key": "locale",
									"value": "en_US",
									"description": "Optional: The language of the help text. One of: en_US (English), ca_ES (Catalan), cs_CZ (Czech), de_DE (German), es_ES (Spanish - Spain), es_419 (Spanish - Latin America), fi_FI (Finnish), fr_FR (French), hi_IN (Hindi), id_ID (Indonesian), it_IT (Italian), ja_JP (Japanese), ko_KR (Korean), nb_NO (Norwegian - Bokm√•l), nl_NL (Dutch), pl_PL (Polish), pt_BR (Portuguese - Brazil), pt_PT (Portuguese - Portugal), sv_SE (Swedish), th_TH (Thai), tr_TR (Turkish), vi_VN (Vietnamese), zh_Hans_CN (Chinese - Simplified), or zh_Hant_TW (Chinese - Traditional)."
								}
							]
						},
						"description": "Updates current custom messaging settings, shown to users in the Universal Prompt. These chnages supersede the¬†[helpdesk_message](https://duo.com/docs/adminapi#modify-settings)¬†settings parameter."
					},
					"response": []
				}
			],
			"description": "\"The 'Account Setup' folder in this collection contains a number of requests specifically designed to help streamline and standardize the onboarding of a new Duo customer. These include tasks such as 'Create Account', 'Modify Edition', 'Modify Settings', 'Modify Custom Branding', and 'Modify Custom Messaging'.\n\nEach of these requests serve as a tool, allowing you to configure and personalize your customer's Duo account to your specific preferences and needs in a templated approach. Before running each request, ensure you thoroughly review and adjust the parameters and necessary variables to align with your customer's unique requirements."
		},
		{
			"name": "User Enrollment",
			"item": [
				{
					"name": "Create Group A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 200",
									"if (pm.response.code === 200) {",
									"    // Parse the response as JSON data",
									"    let jsonData = pm.response.json();",
									"",
									"    // Check if the 'response' field exists and contains 'group_id'",
									"    if (jsonData.response && 'group_id' in jsonData.response) {",
									"        // Store the 'group_id' value in a variable",
									"        pm.globals.set('group_id_a', jsonData.response.group_id);",
									"        pm.globals.set('group_name_a', jsonData.response.name);",
									"        var ChildAccount = pm.globals.get(\"newChildAccount\", ChildAccount);",
									"        console.log(jsonData.response.name + \" group created successfully for \" + ChildAccount);",
									"    } else {",
									"        console.error(\"Error: The 'group_id' field is not present in the response\");",
									"    }",
									"} else {",
									"    console.error(\"Error: The request did not succeed. Status code: \" + pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/groups?account_id={{child_account_account_id}}&name=Duo Users&desc=Users required to perform Duo MFA",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								},
								{
									"key": "name",
									"value": "Duo Users",
									"description": "The name of the group. "
								},
								{
									"key": "desc",
									"value": "Users required to perform Duo MFA",
									"description": "The description of the group. "
								},
								{
									"key": "status",
									"value": "Disabled",
									"description": "The authentication status of the group. \n\nActive: When this status is set, the users in the group are required to complete secondary authentication.\n\nBypass: If this status is chosen, the users in the group will bypass secondary authentication after completing primary authentication.\n\nDisabled: With this status, the users in the group will not be able to authenticate.\nThe group's authentication status. May be one of:",
									"disabled": true
								}
							]
						},
						"description": "Create a new group."
					},
					"response": []
				},
				{
					"name": "Enroll Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\");",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\");",
									"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\");",
									"    var AUTH_TYPE = 'HMAC-SHA1';",
									"",
									"    // console.log('Auth data:', IKEY, SKEY, API_HOSTNAME, AUTH_TYPE);",
									"",
									"",
									"    if (!API_HOSTNAME) {",
									"        throw new Error(\"API_HOSTNAME is not defined\");",
									"    }",
									"    ",
									"    if (requestUrl.indexOf(\"?\") == -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"    ",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
									"    ",
									"    api_call = api_call.replace(\"}}\", \"\");",
									"",
									"    var params_unsorted = \"\";",
									"    var params_array = [];",
									" ",
									"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"        for (var parameter1 in requestBody) {",
									"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"            params_array.push(params_unsorted);",
									"        }",
									"    } else {",
									"        params_unsorted = requestUrl.substring(paramsStart+1);",
									"        params_array = params_unsorted.split(\"&\");",
									"    }",
									"    ",
									"    params_array.sort();",
									"    var encoded_params = \"\";",
									"    ",
									"    if (params_array[0] !== \"\"){",
									"    encoded_params = params_array.join(\"&\");",
									"    }",
									"",
									"",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\",timestamp);",
									"",
									"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									"    // console.log(\"requestData:\", requestData)",
									"    var CryptoJS = require('crypto-js');",
									"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"",
									"    var prebase = IKEY+\":\"+ hmacDigest;",
									"     ",
									"    var btoa = require('btoa');",
									"    var baseComplete = btoa(prebase);",
									"",
									"    var authHeader = \"Basic \"+ baseComplete;",
									"    // console.log('Computed Auth Header:', authHeader);",
									"    return authHeader;",
									"}",
									"",
									"function urlEncodeParams(value, index, array) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"const csvData = pm.variables.get(\"usersCsv\");",
									"const rows = csvData.split(\"\\n\");",
									"",
									"function enrollUser(username, email, enrolledUsers) {",
									"    return new Promise((resolve, reject) => {",
									"        pm.globals.set(\"username\", username);",
									"        pm.globals.set(\"email\", email);",
									"",
									"        const accountId = pm.globals.get(\"child_account_account_id\");",
									"        const url = `https://${pm.globals.get(\"accounts_api_host\")}/admin/v1/users/enroll?account_id=${accountId}&username=${encodeURIComponent(username)}&email=${encodeURIComponent(email)}`;",
									"",
									"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader('POST', url, {}));",
									"",
									"        pm.sendRequest({",
									"            url: url,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Content-Type\": \"application/x-www-form-urlencoded\",",
									"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"                \"Date\": pm.globals.get(\"timestampHeader\")",
									"            },",
									"            body: {}",
									"        }, function(err, res) {",
									"            if (res.code === 200) {",
									"                enrolledUsers.push(username); // Track successfully enrolled users",
									"                resolve();",
									"            } else {",
									"                reject();",
									"            }",
									"        });",
									"    });",
									"}",
									"",
									"(async () => {",
									"    const enrolledUsers = [];",
									"    // Ignore the header row (assuming it's always the first one)",
									"    for (let i = 1; i < rows.length; i++) {",
									"        const [username, email] = rows[i].split(\",\");",
									"        // console.log('Processing row:', username, email);",
									"        try {",
									"            await enrollUser(username, email, enrolledUsers);",
									"        } catch (error) {",
									"            console.error(\"Error occurred during enrollment for username: \" + username);",
									"        }",
									"    }",
									"",
									"    // Check if any users were enrolled successfully",
									"    if (enrolledUsers.length > 0) {",
									"        console.log(\"Enrollment email sent to the following users successfully: \" + enrolledUsers.join(\", \"));",
									"    }",
									"})();",
									"",
									"pm.globals.unset(\"username\");",
									"pm.globals.unset(\"email\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/users/enroll?account_id={{child_account_account_id}}&username={{username}}&email={{email}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"enroll"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}"
								},
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "email",
									"value": "{{email}}"
								}
							]
						},
						"description": "Enroll a user with user name¬†`username`¬†and email address¬†`email`¬†and send them an enrollment email that expires after¬†`valid_secs`¬†seconds."
					},
					"response": []
				}
			]
		},
		{
			"name": "Application Management",
			"item": [
				{
					"name": "Create Integration A (rdp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the value of the 'name' field",
									"const integrationName = pm.response.json().response.name;",
									"const integrationType = pm.response.json().response.type;",
									"const integrationKey = pm.response.json().response.integration_key;",
									"const secretKey = pm.response.json().response.secret_key;",
									"",
									"pm.globals.set(\"integration_name_a\", integrationName);",
									"pm.globals.set(\"integration_key_a\", integrationKey);",
									"pm.globals.set(\"secret_key_a\", secretKey);",
									"",
									"var newChildAccount = pm.globals.get(\"newChildAccount\");",
									"var API_Hostname = pm.globals.get(\"child_account_api_hostname\");",
									"",
									"var scriptOutput = `duo-win-login-4.X.X.exe /S /V\" /qn IKEY=\"${integrationKey}\" SKEY=\"${secretKey}\" HOST=\"${API_Hostname}\" AUTOPUSH=\"#1\" FAILOPEN=\"#0\" ENABLEOFFLINE=\"1\"\"`;",
									"",
									"console.log(`${integrationName} (${integrationType}) created successfully for ${newChildAccount}:\\n\\nPlease copy the following script for installation via Powershell, Command Line, or RMM: ${scriptOutput}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/integrations?account_id={{child_account_account_id}}&name=Duo Authentication for Windows Logon&type=rdp",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}"
								},
								{
									"key": "name",
									"value": "Duo Authentication for Windows Logon"
								},
								{
									"key": "type",
									"value": "rdp",
									"description": "Required"
								},
								{
									"key": "adminapi_admins",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-integration"
					},
					"response": []
				},
				{
					"name": "Create Integration B (rdweb)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the value of the 'name' field",
									"const integrationName = pm.response.json().response.name;",
									"const integrationType = pm.response.json().response.type;",
									"const integrationKey = pm.response.json().response.integration_key;",
									"const secretKey = pm.response.json().response.secret_key;",
									"",
									"pm.globals.set(\"integration_name_b\", integrationName);",
									"pm.globals.set(\"integration_key_b\", integrationKey);",
									"pm.globals.set(\"secret_key_b\", secretKey)",
									"",
									"var newChildAccount = pm.globals.get(\"newChildAccount\");",
									"var API_Hostname = pm.globals.get(\"child_account_api_hostname\");",
									"",
									"var scriptOutput = `msiexec.exe /i duo-rdweb-3.X.X.msi DUO_IKEY=\"${integrationKey}\" DUO_SKEY=\"${secretKey}\" DUO_HOST=\"${API_Hostname}\" /qn`;",
									"",
									"console.log(`${integrationName} (${integrationType}) created successfully for ${newChildAccount}:\\n\\nPlease copy the following script for installation via Powershell, Command Line, or RMM: ${scriptOutput}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/integrations?account_id={{child_account_account_id}}&name=Duo Authentication for Microsoft Remote Desktop Web&type=rdweb",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}"
								},
								{
									"key": "name",
									"value": "Duo Authentication for Microsoft Remote Desktop Web"
								},
								{
									"key": "type",
									"value": "rdweb",
									"description": "Required"
								},
								{
									"key": "adminapi_admins",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-integration"
					},
					"response": []
				},
				{
					"name": "Create Integrations C (VPN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the value of the 'name' field",
									"const integrationName = pm.response.json().response.name;",
									"const integrationType = pm.response.json().response.type;",
									"const integrationKey = pm.response.json().response.integration_key;",
									"const secretKey = pm.response.json().response.secret_key;",
									"",
									"pm.globals.set(\"integration_name_c\", integrationName);",
									"pm.globals.set(\"integration_key_c\", integrationKey);",
									"pm.globals.set(\"secret_key_c\", secretKey);",
									"",
									"var newChildAccount = pm.globals.get(\"newChildAccount\");",
									"var API_Hostname = pm.globals.get(\"child_account_api_hostname\");",
									"",
									"console.log(`${integrationName} (${integrationType}) created successfully for ${newChildAccount}:\\n\\nPlease update your authproxy.cfg file with the following configuration. Be sure to update the required details with your client-specific details.`);",
									"",
									"var authProxyConfig = `",
									"[ad_client]",
									"host=1.2.3.4",
									"host_2=1.2.3.5",
									"service_account_username=duoservice",
									"service_account_password=password1",
									"search_dn=DC=example,DC=com",
									"",
									"[radius_server_auto]",
									"ikey=${integrationKey}",
									"skey=${secretKey}",
									"api_host=${API_Hostname}",
									"failmode=safe",
									"radius_ip_1=5.6.7.8",
									"radius_secret_1=thisisalsoaradiussecret",
									"client=ad_client",
									"`;",
									"",
									"console.log(authProxyConfig);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v1/integrations?account_id={{child_account_account_id}}&name=Cisco VPN&type=ciscoradius",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}"
								},
								{
									"key": "name",
									"value": "Cisco VPN"
								},
								{
									"key": "type",
									"value": "ciscoradius",
									"description": "Required"
								},
								{
									"key": "adminapi_admins",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-integration"
					},
					"response": []
				}
			],
			"description": "The 'Application Management' folder in this collection provides a set of requests dedicated to creating new integrations on the target account.\n\nPlease see below a list of common Duo integration types. For a more exhaustive list of integration types, see the 'type' Key under [Retrieve Integrations](https://duo.com/docs/adminapi#retrieve-integrations) in the Admin API documentation.\n\n``` json\n\"Type\"                        Description\n\"authapi\"                     Auth API\n\"barracuda\"                   Barracuda\n\"bomgar\"                      Bomgar\n\"cisco\"                       Cisco ASA SSL VPN\n\"ciscofirepower\"              Cisco Firepower Threat Defense VPN\n\"ciscoiseradius\"              Cisco ISE\n\"ciscoradius\"                 Cisco RADIUS VPN\n\"device-management-portal\"    Device Management Portal\n\"dng\"                         Duo Network Gateway - Web Application\n\"dng-rdp\"                     Duo Network Gateway - RDP Relay\n\"dng-smb\"                     Duo Network Gateway - SMB Relay\n\"dng-ssh\"                     Duo Network Gateway - SSH Relay\n\"fortinet\"                    Fortinet FortiGate SSL VPN\n\"juniper\"                     Juniper SSL VPN\n\"ldapproxy\"                   LDAP Proxy\n\"macos\"                       macOS\n\"merakiradius\"                Meraki RADIUS VPN\n\"owa\"                         Microsoft OWA\n\"paloalto\"                    Palo Alto SSL VPN\n\"radius\"                      RADIUS\n\"rdgateway\"                   Microsoft RD Gateway\n\"rdp\"                         Microsoft RDP\n\"rdweb\"                       Microsoft RD Web\n\"rras\"                        Microsoft RRAS\n\"sonicwallsra\"                SonicWALL SRA SSL VPN\n\"sophosutm\"                   Sophos UTM\n\"unix\"                        Unix Application\n\"vmwareview\"                  VMWare View\n\n ```"
		},
		{
			"name": "Policy Management",
			"item": [
				{
					"name": "Retrieve Global Policy (Key)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"",
									"// Check if is_global_policy is true",
									"if (jsonData.response[0].is_global_policy === true) {",
									"    // Set global_policy_key as the policy key",
									"    pm.globals.set(\"global_policy_key\", jsonData.response[0].policy_key);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v2/policies?account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								}
							]
						},
						"description": "This request is designed to retrieve the Global Policy policy key to be used in updating the Global Policy in the Update Global Policy request."
					},
					"response": []
				},
				{
					"name": "Update Global Policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const policyKey = pm.response.json().response.policy_key;",
									"const policyName = pm.response.json().response.policy_name;",
									"// pm.globals.set(\"temp_policy_key\", policyKey);",
									"pm.globals.set(\"policyName\", policyName);",
									"var ChildAccount= pm.globals.get(\"newChildAccount\", ChildAccount);",
									"console.log(\"Global Policy updated successfully for \" + ChildAccount);",
									"// console.log(\"Policy key assigned to temp_policy_key: \" + policyKey);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"is_global_policy\": true,\n            \"sections\": {\n                \"authentication_methods\": {\n                    \"allowed_auth_list\": [\n                        \"duo-passcode\",\n                        \"duo-push\",\n                        \"hardware-token\",\n                        \"sms\",\n                        \"webauthn-platform\",\n                        \"webauthn-roaming\"\n                    ],\n                    \"auto_retry_sms\": false,\n                    \"blocked_auth_list\": [],\n                    \"require_verified_push\": true,\n                    \"verified_push_digits\": 6\n                },\n                \"authentication_policy\": {\n                    \"user_auth_behavior\": \"enforce\"\n                },\n                \"authorized_networks\": {\n                    \"no_2fa_required\": {\n                        \"ip_list\": [],\n                        \"require_enrollment\": true\n                    }\n                },\n                \"device_health_app\": {\n                    \"prompt_to_install\": [\n                        \"macos\",\n                        \"windows\"\n                    ],\n                    \"requires_DHA\": []\n                },\n                \"new_user\": {\n                    \"new_user_behavior\": \"enroll\"\n                },\n                \"remembered_devices\": {\n                    \"browser_apps\": {\n                        \"enabled\": false\n                    },\n                    \"windows_logon\": {\n                        \"enabled\": false\n                    }\n                },\n                \"trusted_endpoints\": {\n                    \"trusted_endpoint_checking\": \"not-configured\",\n                    \"trusted_endpoint_message\": \"Disabled - To enable the <trusted_endpoints> policy section, you must first configure Trusted Endpoints. (see https://duo.com/docs/trusted-endpoints)\"\n                }\n         }\n}"
						},
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{global_policy_key}}?account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"{{global_policy_key}}"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								}
							]
						},
						"description": "Modify the JSON body of the request according to your policy requirements."
					},
					"response": []
				},
				{
					"name": "Create Policy A (Bypass MFA)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const policyKey = pm.response.json().response.policy_key;",
									"const policyName = pm.response.json().response.policy_name;",
									"pm.globals.set(\"policy_key_a\", policyKey);",
									"pm.globals.set(\"policy_name_a\", policyName);",
									"",
									"// Retrieve the values of 'integrationName' and 'ChildAccount' from the global variables",
									"var integrationName = pm.globals.get(\"integration_name_a\");",
									"var ChildAccount = pm.globals.get(\"newChildAccount\");",
									"",
									"console.log(policyName + \" policy was successfully created\");",
									"// console.log(\"Policy key assigned to temp_policy_key: \" + policyKey);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"policy_name\": \"Bypass MFA\",\n    \"sections\": {\n        \"authentication_policy\": {\n            \"user_auth_behavior\": \"bypass\" \n        }\n    }\n    }"
						},
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v2/policies?account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Policy B (Enforce MFA)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const policyKey = pm.response.json().response.policy_key;",
									"const policyName = pm.response.json().response.policy_name;",
									"pm.globals.set(\"policy_key_b\", policyKey);",
									"pm.globals.set(\"policy_name_b\", policyName);",
									"",
									"// Retrieve the values of 'integrationName' and 'ChildAccount' from the global variables",
									"var integrationName = pm.globals.get(\"integration_name_b\");",
									"var ChildAccount = pm.globals.get(\"newChildAccount\");",
									"",
									"console.log(policyName + \" policy was successfully created\");",
									"// console.log(\"Policy key assigned to temp_policy_key: \" + policyKey);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"policy_name\": \"Enforce MFA\",\n    \"sections\": {\n        \"authentication_policy\": {\n            \"user_auth_behavior\": \"enforce\" \n        }\n    }\n    }"
						},
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v2/policies?account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply (Application) Policy A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json().response;",
									"const policyName = responseJson.policy_name;",
									"",
									"",
									"const appName = responseJson.policy_applies_to[0].app_name;",
									"",
									"var ChildAccount = pm.globals.get(\"newChildAccount\");",
									"console.log(policyName + \" policy was applied successfully to \" + appName);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"policy_name\": \"{{policy_name_a}}\",\n   \"sections\": {},\n   \"sections_to_delete\": [],\n   \"apply_to_apps\": {\n      \"affect_all_apps\": \"inactive\",\n      \"apply_list\": [\"{{integration_key_a}}\"]\n   }\n}"
						},
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_a}}?account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"{{policy_key_a}}"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply (Group) Policy B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json().response;",
									"const policyName = responseJson.policy_name;",
									"",
									"const appName = responseJson.policy_applies_to[0].app_name;",
									"const groupName = responseJson.policy_applies_to[0].groups[0].group_name;",
									"",
									"var ChildAccount = pm.globals.get(\"newChildAccount\");",
									"console.log(policyName + \" policy was applied successfully to \" + appName + \" for the \" + groupName + \" group.\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"policy_name\": \"{{policy_name_b}}\",\n   \"sections\": {   },\n   \"sections_to_delete\": [  ],\n   \"apply_to_groups_in_apps\": {\n      \"group_policy_apply_order\": \"existing\",\n      \"apply_group_policies_list\": [\n         {\n            \"app_integration_key\": \"{{integration_key_a}}\",\n            \"group_id_list\": [\"{{group_id_a}}\"]\n         }\n      ]\n   }\n}\n"
						},
						"url": {
							"raw": "https://{{accounts_api_host}}/admin/v2/policies/{{policy_key_b}}?account_id={{child_account_account_id}}",
							"protocol": "https",
							"host": [
								"{{accounts_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"{{policy_key_b}}"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{child_account_account_id}}",
									"description": "DO NOT CHANGE"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "The 'Policy Managment' folder in the 'Duo Onboarding' collection provides a set of requests designed to define and assign policies to the newly created Duo account.\n\nPolicy configuration and assignment can be complex, but understanding the core functionality of Duo's policy engine and how these policies work together will help in defining granular policy definitions to meet your customer's security needs. If you aren't familiar with Duo's policy stack, please refer to our [Policy and Control](https://duo.com/docs/policy) documentation for further insight. Doing so will help defining the policies within this API playground much more intutive.\n\nWithin the workspace, we are using the following endpoints to pull, create, and update policies.\n\n- Retrieve Policies - Retrieve a complete set of all policies. Includes all [policy section data](https://duo.com/docs/adminapi#policy-section-data) for each policy.\n- Create Policy - Creates a new custom policy with the `name` specified in the parameters.\n- Update Policy - Change an existing policy's `name`, add or remove policy `sections`, or update keys/values for the policy with the specified policy_key\n    - If you add a new policy `section` to a custom policy then the API enables the section (that is, makes it active in the policy) and sets the valid values you specify. Any key/value pairs not specified for the section will be set to their default values. If you add a blank policy section, it will be enabled for the policy with default values.If you modify values for an existing policy `section` then the API changes only the values you specify.\n\n#### Defining Policies\n\nWhile other requests in this workspace use the Params section of the request to define the parameters to be sent to the Duo API, the /policy endpoint accepts the parameters in the body of the request. See the [Duo Admin API - Policy](https://duo.com/docs/adminapi#policy) documentation for further insight.\n\nTo make defining polcies as simple as possible within the workspace, we have included several policy templates below. However, if you would like to define more granular and specic policy options, please update the policy sections according to our [Policy Sections Data](https://duo.com/docs/adminapi#policy-section-data) as appropriate for your client's needs.\n\n#### Example Policy Section Data (Do not use)\n\n``` json\n{\n    \"sections\": {\n        \"anonymous_networks\": {\n            # Values: 1 of no-action, require-mfa, deny\n            \"anonymous_access_behavior\": \"no-action\"\n        },\n        \"authentication_methods\": {\n           # \"duo-passcode\" and \"phonecall\" are blocked by default\n           # values for lists: \"desktop\", \"duo-passcode\", \"duo-push\", \"duo-push-pwl\", \"hardware-token\", \n           # \"phonecall\" (UI: phone callback), \"webauthn-platform\" (UI: WebAuthn / Touch ID), \n           # \"webauthn-platform-pwl\",\"webauthn-roaming\" (UI: WebAuthn / security keys (WebAuthn)),     \n           # \"webauthn-roaming-pwl\", \"sms\"\n            \"allowed_auth_list\": [\"duo-push\", \"hardware-token\", \"webauthn-platform\", \"webauthn-roaming\", \"sms\"],\n            \"blocked_auth_list\": [\"duo-passcode\", \"phonecall\"],\n            \"require_verified_push\": true,\n            # default is 3, values are 3-6\n            \"verified_push_digits\": 3,\n        },\n        \"authentication_policy\": {\n            # values: 1 of enforce, bypass, deny\n            \"user_auth_behavior\": \"enforce\"\n        },\n        \"authorized_networks\": {\n            \"no_2fa_required\": {\n                # IP address lists can contain individual IPs, IP ranges and IP ranges in CIDR notation\n                \"ip_list\": [\"1.2.3.4\", \"5.6.7.8\", \"57.23.4.1-57.23.4.100\", \"152.241.10.0/24\"],\n                # must have at least one IP address in ip_list to change the default require_enrollment\n                \"require_enrollment\": true\n            },\n            \"mfa_required\": {\n                \"ip_list\": [\"1.2.3.4\", \"5.6.7.8\", \"57.23.4.1-57.23.4.100\", \"152.241.10.0/24\"]\n            },\n            # must have at least one IP address in EITHER or BOTH ip_list(s) to change the default deny_other_access\n            \"deny_other_access\": false\n        },\n        \"browsers\": {\n            \"allowed_browsers_list\": [\"chrome\", \"chrome-mobile\", \"edge\", \"firefox\", \"safari\", \"safari-mobile\"],\n            \"blocked_browsers_list\": [\"ie\", \"other-browsers\"],\n            # Value is 1 of \"warn-only\", \"warn-and-block\", \"no-remediation\"\n            # if this value is set, it affects ALL the browsers in the allowed list\n            \"out_of_date_behavior\": \"no-remediation\",\n            # The expected values are shown in the UI, other numerical values are invalid\n            \"browser_max_ood_days\": 30\n        },\n        \"device_health_app\": {\n            # If an OS is listed in requires_DHA, it's the equivalent of setting \"Enforcing\" in the UI.\n            # \"linux\" as a value for any key in this block requires setting a feature flag\n            \"requires_DHA\": [\"macos\", \"windows\", \"linux\"],\n            \"prompt_to_install\": [\"macos\", \"windows\", \"linux\"],\n            \"enforce_firewall\": [\"macos\", \"windows\", \"linux\"],                      \n            \"enforce_encryption\": [\"macos\", \"windows\", \"linux\"],\n            \"enforce_system_password\": [\"macos\", \"windows\", \"linux\"],\n            # Enforcing a security agent is implied by at least one macos_endpoint_security_list entry\n            # Mac endpoint security agent values as listed in the policy modal dropdown\n            \"macos_endpoint_security_list\": [\"endpt_agent1\", \"endpt_agent2\"],\n            \"macos_remediation_note\": \"some note\",                \n            # Windows endpoint security agent values as listed in the policy modal dropdown\n            \"windows_endpoint_security_list\": [\"endpt_agent1\", \"endpt_agent2\"],\n            \"windows_remediation_note\": \"some note\"\n        },\n        \"duo_mobile_app\": {\n            \"require_updates\": true\n        },\n        \"full_disk_encryption\": {\n            \"require_encryption\": false\n        },\n        \"mobile_device_biometrics\": {\n            \"require_biometrics\": false\n        },\n    # called ‚ÄúNew User policy‚Äù in UI\n        \"new_user\": {\n            # Values: 1 of \"enroll\", \"no-mfa\", \"deny\"\n            \"new_user_behavior\": \"enroll\"\n        },\n        \"operating_systems\": {\n            # allow and block lists must not contain the same values.\n            # allow_os_list contains OSes with no constraints or warnings.\n            # block_os_list contains OSes that are not allowed.\n            \"allow_os_list\": [\"android\", \"chromeos\", \"ios\", \"linux\", \"macos\", \"windows\", \"unknownos\"],\n            \"block_os_list\": [\"blackberry\", \"windowsphone\"],\n            \"os_restrictions\": {\n                # Defaults for os_restriction blocks: \n                #   Warn and block policies = no-remediation\n                #   Warn and block policy versions = \"\" (blank string)\n                #     Versions should be auto-set for anything other than no-remediation (blank) or less-than-version (see below)\n                #   Warn and block remediation days = 0\n                # Less-than-version - this should require *_version to be filled in with a valid value (not blank).\n                \"android\": {\n                    # no-remediation equates to UI values \"never\" for warn_policy and \"none\" for block_policy\n                    # warn_policy values: \"no-remediation\", \"less-than-latest\", \"less-than-version\", \"end-of-life\", \"not-up-to-date\"\n                    \"warn_policy\": \"no-remediation\",\n                    \"warn_version\": \"\",\n                    # *_remediation_days values come from the list shown in the UI (0, 14, 30, 60, 90, 180, 365)\n                    # other values are invalid\n                    \"warn_remediation_days\": 0,\n                    # block_policy values: \"no-remediation\", \"less-than-latest\", \"less-than-version\", \"end-of-life\", \"not-up-to-date\"\n                    \"block_policy\": \"no-remediation\",    \n                    \"block_version\": \"\",\n                    \"block_remediation_days\": 0\n                },\n                # see android_restrictions for notes\n                \"ios\": {\n                     \"warn_policy\": \"no-remediation\",\n                    \"warn_version\": \"\",\n                    \"warn_remediation_days\": 0,\n                    \"block_policy\": \"no-remediation\",\n                    \"block_version\": \"\",\n                    \"block_remediation_days\": 0\n                },\n                # see android_restrictions for notes\n                \"macos\": {\n                     \"warn_policy\": \"no-remediation\",\n                    \"warn_version\": \"\",\n                    \"warn_remediation_days\": 0,\n                    \"block_policy\": \"no-remediation\",\n                    \"block_version\": \"\",\n                    \"block_remediation_days\": 0\n                },\n                # see android_restrictions for notes\n                \"windows\": {\n                     \"warn_policy\": \"no-remediation\",\n                    \"warn_version\": \"\",\n                    \"warn_remediation_days\": 0,\n                    \"block_policy\": \"no-remediation\",\n                    \"block_version\": \"\",\n                    \"block_remediation_days\": 0\n                }\n            }\n        },\n        \"plugins\": {\n            # Values: 1 of \"allow-all\" or \"block-all\"\n            \"flash\": \"block-all\",\n            # Values: 1 of \"allow-all\", \"warn-only\", \"warn-and-block\", \"block-all\"\n            \"java\": \"warn-only\",\n            # The expected values are shown in the UI, other values are invalid\n            \"java_max_ood_days\": 30\n        },\n        \"remembered_devices\": {\n            \"browser_apps\": {\n                \"enabled\": true,\n                # Values: 1 of \"user-based\" or \"risk-based\"\n                \"remember_method\": \"user-based\",\n                \"user_based\": {\n                    # Values: 1 of \"days\" or \"hours\"\n                    \"max_time_units\": \"hours\",\n                    # max_time_value can be 1-365 (if units are days) OR 1-8760 (if units are hours)\n                    \"max_time_value\": 12,\n                    \"confirm_per_app\": false\n                },\n                \"risk_based\": {\n                    # Values: 1 of \"days\" or \"hours\"\n                    \"max_time_units\": \"days\"\n                    # max_time_value can be 1-365 (if days) OR 1-8760 (if hours),       \n                    \"max_time_value\": 30,\n                }\n            },\n            \"windows_logon\": {\n                \"enabled\": true,\n                # Values: 1 of \"days\" or \"hours\"\n                \"max_time_units\": \"days\",\n                # max_time_value can be 1-365 (if days) OR 1-8760 (if hours)\n                \"max_time_value\": 30,\n            }\n        },\n        \"risk_based_factor_selection\": {\n            \"limit_to_risk_based_auth_methods\": false,\n            # default is 3, values are 3-6\n            \"risk_based_verified_push_digits\": 3\n        },\n        \"screen_lock\": {\n            \"require_screen_lock\": true\n        },\n        \"tampered_devices\": {\n            \"block_tampered_devices\": true\n        },\n        \"trusted_endpoints\": {\n            # Values are 1 of allow-all, require-trusted, no-action \n            #  \"no-action\" (UI: \"Do not check endpoints for trustworthiness\" option is checked) is dependent on \n            #   whether a feature flag is ON\n            \"trusted_endpoint_checking\": \"allow-all\",\n            \"cisco_secure_endpoint_can_block\": false,\n            # values are 1 of allow-all, require-trusted, (and no-action, if a feature flag as mentioned above is set)\n            # setting a value is optional ‚Äì auto-sets to the same value as trusted_endpoint_checking\n            \"trusted_endpoint_checking_mobile\": \"allow-all\"\n        },\n        \"user_location\": {\n            \"require_mfa_countries_list\": [\"countrycode1\",\"countrycode2\"],\n            \"deny_access_countries_list\": [\"countrycode1\",\"countrycode2\"],\n            \"allow_access_no_2fa_countries_list\": [\"countrycode1\",\"countrycode2\"],\n            # listed as \"no action\" in the UI\n            \"ignore_location_countries_list\": [\"countrycode1\",\"countrycode2\"], \n            # Values are 1 of ignore-location, require-mfa, deny-access, allow-access-no-2fa\n            \"default_action\": \"ignore-location\"\n        }\n\n ```\n\nThe following policy templates can be used in the body of POST or PUT requests to ceate or update an existing policy.\n\n#### Duo Premier Policy Template (Usable)\n\n``` json\n{\n            \"name\": \"[Policy Name]\",\n            \"is_global_policy\": false,\n            \"sections\": {\n                \"anonymous_networks\": {\n                    \"anonymous_access_behavior\": \"no-action\"\n                },\n                \"authentication_methods\": {\n                    \"allowed_auth_list\": [\n                        \"duo-passcode\",\n                        \"duo-push\",\n                        \"hardware-token\",\n                        \"phonecall\",\n                        \"sms\",\n                        \"webauthn-platform\",\n                        \"webauthn-roaming\"\n                    ],\n                    \"auto_retry_sms\": false,\n                    \"blocked_auth_list\": [\n                        \"duo-push-pwl\",\n                        \"webauthn-platform-pwl\",\n                        \"webauthn-roaming-pwl\"\n                    ],\n                    \"require_verified_push\": true,\n                    \"verified_push_digits\": 3\n                },\n                \"authentication_policy\": {\n                    \"user_auth_behavior\": \"enforce\"\n                },\n                \"authorized_networks\": {\n                    \"deny_other_access\": false,\n                    \"mfa_required\": {\n                        \"ip_list\": []\n                    },\n                    \"no_2fa_required\": {\n                        \"ip_list\": [],\n                        \"require_enrollment\": true\n                    }\n                },\n                \"browsers\": {\n                    \"allowed_browsers_list\": [\n                        \"chrome\",\n                        \"chrome-mobile\",\n                        \"edge\",\n                        \"firefox\",\n                        \"ie\",\n                        \"other-browsers\",\n                        \"safari\",\n                        \"safari-mobile\"\n                    ],\n                    \"blocked_browsers_list\": [],\n                    \"browser_max_ood_days\": 30,\n                    \"out_of_date_behavior\": \"no-remediation\"\n                },\n                \"device_health_app\": {\n                    \"enforce_encryption\": [],\n                    \"enforce_firewall\": [],\n                    \"enforce_system_password\": [],\n                    \"macos_endpoint_security_list\": [],\n                    \"macos_remediation_note\": \"\",\n                    \"prompt_to_install\": [],\n                    \"requires_DHA\": [],\n                    \"windows_endpoint_security_list\": [],\n                    \"windows_remediation_note\": \"\"\n                },\n                \"duo_desktop\": {\n                    \"device_health_device_id_pinning\": \"no-enforcement\",\n                    \"device_health_signed_payload\": \"no-enforcement\"\n                },\n                \"duo_mobile_app\": {\n                    \"require_updates\": false\n                },\n                \"full_disk_encryption\": {\n                    \"require_encryption\": false\n                },\n                \"mobile_device_biometrics\": {\n                    \"require_biometrics\": false\n                },\n                \"new_user\": {\n                    \"new_user_behavior\": \"no-mfa\"\n                },\n                \"operating_systems\": {\n                    \"allow_unrestricted_os_list\": [\n                        \"android\",\n                        \"blackberry\",\n                        \"chromeos\",\n                        \"ios\",\n                        \"linux\",\n                        \"macos\",\n                        \"unknownos\",\n                        \"windows\",\n                        \"windowsphone\"\n                    ],\n                    \"block_os_list\": [],\n                    \"os_restrictions\": {}\n                },\n                \"plugins\": {\n                    \"flash\": \"allow-all\",\n                    \"java\": \"allow-all\",\n                    \"java_max_ood_days\": 30\n                },\n                \"remembered_devices\": {\n                    \"browser_apps\": {\n                        \"enabled\": true,\n                        \"remember_method\": \"user-based\",\n                        \"user_based\": {\n                            \"confirm_per_app\": false,\n                            \"max_time_units\": \"hours\",\n                            \"max_time_value\": 12\n                        }\n                    },\n                    \"windows_logon\": {\n                        \"enabled\": false\n                    }\n                },\n                \"risk_based_factor_selection\": {\n                    \"limit_to_risk_based_auth_methods\": false,\n                    \"risk_based_verified_push_digits\": 6\n                },\n                \"screen_lock\": {\n                    \"require_screen_lock\": true\n                },\n                \"tampered_devices\": {\n                    \"block_tampered_devices\": false\n                },\n                \"trusted_endpoints\": {\n                    \"cisco_secure_endpoint_can_block\": false,\n                    \"trusted_endpoint_checking\": \"allow-all\",\n                    \"trusted_endpoint_checking_mobile\": \"allow-all\"\n                },\n                \"user_location\": {\n                    \"allow_access_no_2fa_countries_list\": [],\n                    \"default_action\": \"ignore-location\",\n                    \"deny_access_countries_list\": [],\n                    \"ignore_location_countries_list\": [],\n                    \"require_mfa_countries_list\": []\n                }\n            }\n        }\n\n ```\n\n#### Duo Advantage Policy Template (Usable)\n\n``` json\n{\n            \"name\": \"[Policy Name]\",\n            \"is_global_policy\": false,\n            \"sections\": {\n                \"authentication_methods\": {\n                    \"allowed_auth_list\": [\n                        \"duo-passcode\",\n                        \"duo-push\",\n                        \"hardware-token\",\n                        \"sms\",\n                        \"webauthn-platform\",\n                        \"webauthn-roaming\"\n                    ],\n                    \"auto_retry_sms\": false,\n                    \"blocked_auth_list\": [],\n                    \"require_verified_push\": true,\n                    \"verified_push_digits\": 6\n                },\n                \"authentication_policy\": {\n                    \"user_auth_behavior\": \"enforce\"\n                },\n                \"authorized_networks\": {\n                    \"no_2fa_required\": {\n                        \"ip_list\": [],\n                        \"require_enrollment\": true\n                    }\n                },\n                \"device_health_app\": {\n                    \"prompt_to_install\": [\n                        \"macos\",\n                        \"windows\"\n                    ],\n                    \"requires_DHA\": []\n                },\n                \"new_user\": {\n                    \"new_user_behavior\": \"enroll\"\n                },\n                \"remembered_devices\": {\n                    \"browser_apps\": {\n                        \"enabled\": false\n                    },\n                    \"windows_logon\": {\n                        \"enabled\": false\n                    }\n                },\n                \"trusted_endpoints\": {\n                    \"trusted_endpoint_checking\": \"not-configured\",\n                    \"trusted_endpoint_message\": \"Disabled - To enable the <trusted_endpoints> policy section, you must first configure Trusted Endpoints. (see https://duo.com/docs/trusted-endpoints)\"\n                }\n         }\n}\n\n ```\n\n#### Duo Essentials Policy Template (Usable)\n\n``` json\n{\n            \"name\": \"[Policy Name]\",\n            \"is_global_policy\": false,\n            \"sections\": {\n                \"authentication_methods\": {\n                    \"allowed_auth_list\": [\n                        \"duo-passcode\",\n                        \"duo-push\",\n                        \"hardware-token\",\n                        \"sms\",\n                        \"webauthn-platform\",\n                        \"webauthn-roaming\"\n                    ],\n                    \"auto_retry_sms\": false,\n                    \"blocked_auth_list\": [],\n                    \"require_verified_push\": true,\n                    \"verified_push_digits\": 6\n                },\n                \"authentication_policy\": {\n                    \"user_auth_behavior\": \"enforce\"\n                },\n                \"authorized_networks\": {\n                    \"no_2fa_required\": {\n                        \"ip_list\": [],\n                        \"require_enrollment\": true\n                    }\n                },\n                \"device_health_app\": {\n                    \"prompt_to_install\": [\n                        \"macos\",\n                        \"windows\"\n                    ],\n                    \"requires_DHA\": []\n                },\n                \"new_user\": {\n                    \"new_user_behavior\": \"enroll\"\n                },\n                \"remembered_devices\": {\n                    \"browser_apps\": {\n                        \"enabled\": false\n                    },\n                    \"windows_logon\": {\n                        \"enabled\": false\n                    }\n                },\n                \"trusted_endpoints\": {\n                    \"trusted_endpoint_checking\": \"not-configured\",\n                    \"trusted_endpoint_message\": \"Disabled - To enable the <trusted_endpoints> policy section, you must first configure Trusted Endpoints. (see https://duo.com/docs/trusted-endpoints)\"\n                }\n         }\n}\n\n ```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Retrieve Enrollment Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate the authorization header",
									"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"    // Retrieve Accounts API IKEY, SKEY and API Hostname",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); ",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\"); ",
									"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\"); ",
									"",
									"    // Check if API_HOSTNAME is defined",
									"    if (!API_HOSTNAME) {",
									"        throw new Error(\"API_HOSTNAME is not defined\");",
									"    }",
									"",
									"    // Add a '?' to the end of the URL if it doesn't exist",
									"    if (requestUrl.indexOf(\"?\") == -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"",
									"    // Calculate the starting point of the query parameters in the URL",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"",
									"    // Calculate the length of the hostname",
									"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"",
									"    // Extract the Duo API endpoint",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
									"    api_call = api_call.replace(\"}}\", \"\");",
									"",
									"    var params_unsorted = \"\";",
									"    var params_array = [];",
									"",
									"    // Depending on the HTTP method, extract parameters from URL or body",
									"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"        for (var parameter1 in requestBody) {",
									"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"            params_array.push(params_unsorted);",
									"        }",
									"    } else {",
									"        params_unsorted = requestUrl.substring(paramsStart+1);",
									"        params_array = params_unsorted.split(\"&\");",
									"    }",
									"",
									"    // Sort parameters lexicographically by key",
									"    params_array.sort();                    ",
									"    var encoded_params = \"\";",
									"",
									"    // If there are parameters, encode and join them",
									"    if (params_array[0] !== \"\"){",
									"        var encoded_params_array = params_array.map(urlEncodeParams);  ",
									"        encoded_params = encoded_params_array.join(\"&\");",
									"    }",
									"",
									"    // Get the current timestamp in the RFC 2822 format",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\",timestamp);",
									" ",
									"    // Construct the string to be signed",
									"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									" ",
									"    // Compute the HMAC-SHA1 signature",
									"    var CryptoJS = require('crypto-js');",
									"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"     ",
									"    // Construct the Auth header",
									"    var prebase = IKEY+\":\"+ hmacDigest;",
									"    var btoa = require('btoa');",
									"    var baseComplete = btoa(prebase);",
									"    var authHeader = \"Basic \"+ baseComplete;",
									"",
									"    return authHeader;",
									"}",
									"",
									"// URL encode parameters",
									"function urlEncodeParams(value, index, array) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"// Empty the enrolled_users and not_enrolled_users arrays",
									"pm.globals.unset('enrolled_users');",
									"pm.globals.unset('not_enrolled_users');",
									"",
									"// Initialize or retrieve the lists of enrolled and unenrolled users",
									"let enrolled_users = pm.globals.has('enrolled_users') ? JSON.parse(pm.globals.get('enrolled_users')) : [];",
									"let not_enrolled_users = pm.globals.has('not_enrolled_users') ? JSON.parse(pm.globals.get('not_enrolled_users')) : [];",
									"",
									"// Function to process the users request",
									"function processUsersRequest(apiHostname, accountId) {",
									"    var urlWithAccountId = `https://${apiHostname}/admin/v1/users?account_id=${accountId}&offset=${pm.globals.get(\"next_offset\") || 0}`;",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"GET\", urlWithAccountId, {}, apiHostname));",
									"",
									"    pm.sendRequest({",
									"        url: urlWithAccountId,",
									"        method: \"GET\",",
									"        header: {",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {}",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.error('Error:', err);",
									"            return;",
									"        }",
									"",
									"        if (res.code === 200) {",
									"            var resJson = res.json();",
									"            var users = resJson.response || [];",
									"",
									"            // Process users and categorize them into enrolled and unenrolled",
									"            users.forEach(user => {",
									"                if (user.is_enrolled === true) {",
									"                    enrolled_users.push({username: user.username, email: user.email, user_id: user.user_id});",
									"                } else {",
									"                    not_enrolled_users.push({username: user.username, email: user.email, user_id: user.user_id});",
									"                }",
									"            });",
									"",
									"            // Update the global variables",
									"            pm.globals.set('enrolled_users', JSON.stringify(enrolled_users));",
									"            pm.globals.set('not_enrolled_users', JSON.stringify(not_enrolled_users));",
									"",
									"            // Handle pagination",
									"            if (resJson.metadata && resJson.metadata.next_offset) {",
									"                pm.globals.set('next_offset', resJson.metadata.next_offset);",
									"                processUsersRequest(apiHostname, accountId); // Recursive call for the next page",
									"            } else {",
									"                pm.globals.set('next_offset', 0);",
									"                console.log(\"Enrolled Users:\", enrolled_users);",
									"                console.log(\"Unenrolled Users:\", not_enrolled_users);",
									"            }",
									"        } else {",
									"            console.error('Request failed; Response:', res);",
									"        }",
									"    });",
									"}",
									"",
									"// Start the process",
									"let apiHostname = pm.globals.get(\"accounts_api_host\");",
									"let accountId = pm.globals.get(\"child_account_account_id\");",
									"processUsersRequest(apiHostname, accountId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						},
						"description": "To run the **Retrieve Enrollment Status** request independently from the _Automate Account Onboarding_ workflow follow these steps:\n\n1. Add the account_id under global variables of the account you want to check. This output can be obtained from the response in the Retrieve Accounts request under the Duo Accounts API collection.\n2. Add the newChildAccount variable at the top of the collection, this will be the name of the child account that you want to check. This will be formatted as follows \\[\"New Child Account\"\\], replace the name of the child account with the current name that is attached to the Account ID.\n3. You should now be able to run the collection by itself."
					},
					"response": []
				},
				{
					"name": "Assign Enrolled Users to Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\");",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\");",
									"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\");",
									"    var AUTH_TYPE = 'HMAC-SHA1';",
									"",
									"    // console.log('Auth data:', IKEY, SKEY, API_HOSTNAME, AUTH_TYPE);",
									"",
									"",
									"    if (!API_HOSTNAME) {",
									"        throw new Error(\"API_HOSTNAME is not defined\");",
									"    }",
									"    ",
									"    if (requestUrl.indexOf(\"?\") == -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"    ",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
									"    ",
									"    api_call = api_call.replace(\"}}\", \"\");",
									"    // console.log(\"api_call:\", api_call)",
									"",
									"    var params_unsorted = \"\";",
									"    var params_array = [];",
									" ",
									"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"        for (var parameter1 in requestBody) {",
									"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"            params_array.push(params_unsorted);",
									"        }",
									"    } else {",
									"        params_unsorted = requestUrl.substring(paramsStart+1);",
									"        params_array = params_unsorted.split(\"&\");",
									"    }",
									"    ",
									"    params_array.sort();",
									"    var encoded_params = \"\";",
									"    ",
									"    if (params_array[0] !== \"\"){",
									"    encoded_params = params_array.join(\"&\");",
									"    }",
									"",
									"",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\",timestamp);",
									"",
									"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									"    // console.log(\"requestData:\", requestData)",
									"    var CryptoJS = require('crypto-js');",
									"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"",
									"    var prebase = IKEY+\":\"+ hmacDigest;",
									"",
									"    var btoa = require('btoa'); ",
									"    var baseComplete = btoa(prebase);",
									"",
									"    var authHeader = \"Basic \"+ baseComplete;",
									"    // console.log('Computed Auth Header:', authHeader);",
									"    return authHeader;",
									"}",
									"",
									"function urlEncodeParams(value, index, array) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"function assignUserToGroup(userObj) {",
									"    return new Promise((resolve, reject) => {",
									"        const { user_id: userId, username } = userObj; // Destructuring the user object to get user_id and username",
									"        pm.globals.set(\"user_id\", userId);",
									"        pm.globals.set(\"username\", username); // setting username as a variable",
									"",
									"        const accountId = pm.globals.get(\"child_account_account_id\");",
									"        const groupId = pm.globals.get(\"group_id_a\");",
									"        const groupName = pm.globals.get(\"group_name_a\");",
									"        const url = `https://${pm.globals.get(\"accounts_api_host\")}/admin/v1/users/${encodeURIComponent(userId)}/groups?account_id=${accountId}&group_id=${encodeURIComponent(groupId)}`;",
									"        // console.log(\"URL is:\", url);",
									"",
									"        pm.globals.set(\"hmacAuthHeader\", getAuthHeader('POST', url, {}));",
									"",
									"        pm.sendRequest({",
									"            url: url,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Content-Type\": \"application/x-www-form-urlencoded\",",
									"                \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"                \"Date\": pm.globals.get(\"timestampHeader\")",
									"            },",
									"            body: {}",
									"        }, function (err, res) {",
									"            if (res.code === 200) {",
									"                resolve(username); // Resolve with the username on success",
									"            } else {",
									"                reject(`Failed to assign ${username} to the ${groupName} group`);",
									"            }",
									"        });",
									"    });",
									"}",
									"",
									"var enrolled_users = JSON.parse(pm.globals.get(\"enrolled_users\"));",
									"var userPromises = [];",
									"",
									"// Loop through all but the last user",
									"for (let i = 0; i < enrolled_users.length - 1; i++) {",
									"    userPromises.push(assignUserToGroup(enrolled_users[i]));",
									"}",
									"",
									"// Process the last user separately",
									"var lastUser = enrolled_users[enrolled_users.length - 1];",
									"var url = pm.request.url.toString();",
									"",
									"// Replace placeholders in the URL for the last user",
									"if (url.includes('{{accounts_api_host}}')) {",
									"    var accounts_api_host = pm.globals.get('accounts_api_host');",
									"    url = url.replace(/{{accounts_api_host}}/g, accounts_api_host);",
									"}",
									"if (url.includes('{{user_id}}')) {",
									"    url = url.replace(/{{user_id}}/g, lastUser.user_id);",
									"}",
									"if (url.includes('{{child_account_account_id}}')) {",
									"    var child_account_account_id = pm.globals.get('child_account_account_id');",
									"    url = url.replace(/{{child_account_account_id}}/g, child_account_account_id);",
									"}",
									"if (url.includes('{{group_id_a}}')) {",
									"    var group_id_a = pm.globals.get('group_id_a');",
									"    url = url.replace(/{{group_id_a}}/g, group_id_a);",
									"}",
									"",
									"pm.request.url = url;",
									"pm.globals.set(\"user_id\", lastUser.user_id);",
									"pm.globals.set(\"username\", lastUser.username);",
									"pm.globals.set(\"hmacAuthHeader\", getAuthHeader('POST', url, {}));",
									"",
									"// Add the last user's promise to the array",
									"userPromises.push(assignUserToGroup(lastUser));",
									"",
									"// Use Promise.all to wait for all user assignments to complete",
									"Promise.all(userPromises).then((assignedUsers) => {",
									"    var groupName = pm.globals.get(\"group_name_a\"); // Retrieve the group ID",
									"    console.log(`The following users were added to the ${groupName} group: ${assignedUsers.join(', ')}`);",
									"}).catch(error => {",
									"    console.error(\"Error occurred during group assignment:\", error);",
									"});",
									"",
									"// Reset the enrolled_users global variable",
									"// pm.globals.set(\"enrolled_users\", JSON.stringify([]));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"disabled": true
							},
							{
								"key": "Date",
								"value": "{{timestampHeader}}"
							},
							{
								"key": "Authorization",
								"value": "{{hmacAuthHeader}}"
							}
						],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean Up",
			"item": [
				{
					"name": "Clear Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let variablesToClear = [",
									"    \"newChildAccount\", \"timestampHeader\", \"hmacAuthHeader\",",
									"    \"child_account_account_id\", \"child_account_api_hostname\",",
									"    \"group_id_a\", \"group_name_a\", \"username\", \"email\",",
									"    \"enrolled_users\", \"next_offset\", \"user_id\", \"not_enrolled_users\",",
									"    \"global_policy_key\", \"duoChildAccounts\", \"accountName\", \"policyName\", \"name\", \"number\", \"phone_numbers\", \"bypassUserList\"",
									"];",
									"",
									"let baseVariables = [",
									"    'integration_name_', 'integration_key_', 'secret_key_',",
									"    'policy_name_', 'policy_key_', 'group_id_', 'group_name_'",
									"];",
									"",
									"// Clear specified variables",
									"variablesToClear.forEach(variable => {",
									"    pm.globals.unset(variable); // Use pm.environment.unset(variable) if they are environment variables",
									"});",
									"",
									"// Clear variables based on base names",
									"baseVariables.forEach(baseVar => {",
									"    for (let i = 97; i <= 122; i++) { // ASCII values for 'a' to 'z'",
									"        let dynamicVar = baseVar + String.fromCharCode(i);",
									"        pm.globals.unset(dynamicVar); // Use pm.environment.unset(dynamicVar) if they are environment variables",
									"    }",
									"});",
									"",
									"console.log(\"Variables cleared.\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Tested on Postman 7.8",
					"",
					"// Variable declaration",
					"// Require 'url' module to use its methods for handling and transforming URLs.",
					"var URL = require('url');",
					"",
					"// Get the hostname for the accounts API from Postman collection variables.",
					"var hostname = pm.globals.get(\"accounts_api_host\");",
					"",
					"// Declare a variable to hold Duo Authentication Version",
					"var duo_auth_ver;",
					"",
					"// Retrieve the request url",
					"var req_url = pm.request.url.toString();",
					"",
					"// Account Iteration Block",
					"(function() {",
					"    var accountNames = pm.collectionVariables.get(\"newChildAccounts\");",
					"",
					"    // Check if accountNames is a string, if so, convert it to an array",
					"    if (typeof accountNames === 'string') {",
					"        try {",
					"            accountNames = JSON.parse(accountNames);",
					"        } catch (e) {",
					"            accountNames = [accountNames];",
					"        }",
					"    }",
					"",
					"    var currentIteration = pm.info.iteration;",
					"    if (currentIteration < accountNames.length) {",
					"        var currentAccount = accountNames[currentIteration];",
					"        pm.globals.set(\"newChildAccount\", currentAccount);",
					"    } else {",
					"        pm.globals.set(\"newChildAccount\", \"\");",
					"    }",
					"})();",
					"",
					"function urlEncodeParams(value, index, array) {",
					"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
					"}",
					"",
					"function replaceAllVariables(str) {",
					"    var variableRegex = /\\{\\{(\\w+)\\}\\}/g;",
					"    return str.replace(variableRegex, function(match, variableName) {",
					"        return pm.variables.get(variableName);",
					"    });",
					"}",
					"",
					"function replaceVariables(baseVar, str) {",
					"    for (let i = 97; i <= 122; i++) { // ASCII values for 'a' to 'z'",
					"        let alphabet = String.fromCharCode(i);",
					"        let fullVariable = '{{' + baseVar + alphabet + '}}';",
					"        let variableValue = pm.globals.get(baseVar + alphabet);",
					"",
					"        if (variableValue) {",
					"            str = str.replace(new RegExp(fullVariable, 'g'), variableValue);",
					"        }",
					"    }",
					"    return str;",
					"}",
					"",
					"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody, duo_auth_ver) {",
					"    var IKEY = pm.globals.get(\"accounts_api_ikey\");",
					"    var SKEY = pm.globals.get(\"accounts_api_skey\");",
					"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\");",
					"",
					"    q_str = decodeURIComponent(q_str);",
					"    var api_call = path;",
					"",
					"    var moment = require('moment');",
					"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"    pm.globals.set(\"timestampHeader\", timestamp);",
					"",
					"    var AUTH_TYPE;",
					"    var hmacDigest;",
					"",
					"    switch (duo_auth_ver) {",
					"        case 'v2':",
					"            AUTH_TYPE = 'HMAC-SHA1';",
					"            var params_unsorted = \"\";",
					"            var params_array = [];",
					"            if (Object.keys(requestBody).length !== 0) {",
					"                for (var parameter in requestBody) {",
					"                    params_unsorted = parameter + \"=\" + requestBody[parameter];",
					"                    params_array.push(params_unsorted);",
					"                }",
					"            } else {",
					"                params_unsorted = q_str;",
					"                if (q_str) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                }",
					"            }",
					"            params_array.sort();",
					"            var encoded_params = \"\";",
					"            if (params_array[0] !== \"\") {",
					"                var encoded_params_array = params_array.map(urlEncodeParams);",
					"                encoded_params = encoded_params_array.join(\"&\");",
					"            }",
					"            var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params;",
					"            var CryptoJS = require('crypto-js');",
					"            hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
					"            pm.request.headers.add({key: 'Content-Type', value: 'application/x-www-form-urlencoded'})",
					"            break;",
					"        case 'v5':",
					"            AUTH_TYPE = 'HMAC-SHA512';",
					"            var body_length = Object.keys(requestBody).length;",
					"            var encoded_params = \"\";",
					"            var requestData = \"\";",
					"            if (body_length != 0) {",
					"                var jsonData = JSON.parse(pm.request.body.toJSON().raw);",
					"                var jsonDataString = JSON.stringify(jsonData);",
					"                jsonDataString = replaceAllVariables(jsonDataString);",
					"                jsonData = JSON.parse(jsonDataString);",
					"                params_unsorted = q_str;",
					"                if (params_unsorted.length > 0) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort();",
					"                    var encoded_params_array = params_array.map(urlEncodeParams);",
					"                    encoded_params = encoded_params_array.join(\"&\");",
					"                }",
					"                var CryptoJS = require('crypto-js');",
					"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");",
					"                pm.request.body.update(jsonDataString);",
					"            } else {",
					"                params_unsorted = q_str;",
					"                if (params_unsorted.length > 0) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort();",
					"                    var encoded_params_array = params_array.map(urlEncodeParams);",
					"                    encoded_params = encoded_params_array.join(\"&\");",
					"                }",
					"                var CryptoJS = require('crypto-js');",
					"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");",
					"                // console.log(requestData);",
					"            }",
					"            ",
					"            var CryptoJS = require('crypto-js');",
					"            hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
					"            pm.request.headers.add({key: 'Content-Type', value: 'application/json'});",
					"            break;",
					"    }",
					"",
					"    var prebase = IKEY + \":\" + hmacDigest;",
					"    var btoa = require('btoa');",
					"    var baseComplete = btoa(prebase);",
					"    var authHeader = \"Basic \" + baseComplete;",
					"    return authHeader;",
					"}",
					"",
					"// Base variable names",
					"var baseVariables = ['integration_name_', 'integration_key_', 'secret_key_', 'policy_name_', 'policy_key_', 'group_id_', 'group_name_'];",
					"",
					"// Replace variables in req_url and path",
					"baseVariables.forEach(function(baseVar) {",
					"    req_url = replaceVariables(baseVar, req_url);",
					"});",
					"",
					"if (req_url.includes('/v1/')) {",
					"    duo_auth_ver = 'v2';",
					"} else if (req_url.includes('/v2/')) {",
					"    duo_auth_ver = 'v5';",
					"}",
					"",
					"if (req_url.includes('{{child_account_account_id}}')) {",
					"    var account_id = pm.globals.get('child_account_account_id');",
					"    req_url = req_url.replace('{{child_account_account_id}}', account_id);",
					"}",
					"",
					"if (req_url.includes('{{newChildAccount}}')) {",
					"    var newChildAccount = pm.globals.get('newChildAccount');",
					"    req_url = req_url.replace(/{{newChildAccount}}/g, newChildAccount);",
					"}",
					"",
					"if (req_url.includes('{{username}}')) {",
					"    var username = pm.globals.get('username');",
					"    req_url = req_url.replace(/{{username}}/g, username);",
					"}",
					"",
					"if (req_url.includes('{{email}}')) {",
					"    var email = pm.globals.get('email');",
					"    req_url = req_url.replace(/{{email}}/g, email);",
					"}",
					"",
					"if (req_url.includes('{{next_offset}}')) {",
					"    var next_offset = pm.globals.get('next_offset');",
					"    req_url = req_url.replace(/{{next_offset}}/g, next_offset);",
					"}",
					"",
					"// Parse the query string from the request url",
					"var q_str = URL.parse(req_url).query;",
					"if (q_str == null) {",
					"    q_str = \"\";",
					"}",
					"",
					"// Parse the path from the request url, remove the leading '/', then rejoin the path",
					"var path = decodeURIComponent(URL.parse(req_url).pathname).split(\"/\");",
					"path = path.slice(1);",
					"path = path.join('/');",
					"path = '/' + path;",
					"",
					"// Replace variables in path",
					"baseVariables.forEach(function(baseVar) {",
					"    path = replaceVariables(baseVar, path);",
					"});",
					"",
					"if (path.includes('{{user_id}}')) {",
					"    var user_id = pm.globals.get('user_id');",
					"    path = path.replace('{{user_id}}', user_id);",
					"}",
					"",
					"if (path.includes('{{global_policy_key}}')) {",
					"    var global_policy_key = pm.globals.get('global_policy_key');",
					"    path = path.replace('{{global_policy_key}}', global_policy_key);",
					"}",
					"",
					"// Set the authentication header",
					"var authHeader = getAuthHeader(pm.request.method, hostname, path, q_str, pm.request.body, duo_auth_ver);",
					"pm.globals.set(\"hmacAuthHeader\", authHeader);",
					"",
					"// Ensure only one Content-Type header is set",
					"pm.request.headers.remove('Content-Type');",
					"pm.request.headers.upsert({key: 'Content-Type', value: 'application/json'});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Check if the request was successful",
					"if (pm.response.code === 200) {",
					"    // Unset specific variables",
					"    pm.globals.unset(\"timestampHeader\");",
					"    pm.globals.unset(\"hmacAuthHeader\");",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "newChildAccounts",
			"value": "[\"Child_Account_Name_Goes_Here\"]",
			"type": "string"
		},
		{
			"key": "usersCsv",
			"value": "username,email\nuser1,user1@example.com\nuser2,user2@example.com\nuser3,user3@example.com\nuser4,user4@example.com\nuser5,user5@example.com",
			"type": "string"
		}
	]
}