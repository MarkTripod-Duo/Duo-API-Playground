{
	"info": {
		"_postman_id": "35511012-a467-44dd-a5fd-e597a9df0287",
		"name": "4. Duo Admin API [Child]",
		"description": "This collection enables you to directly manage a _specific_ Duo child account beneath your Duo MSP parent tenant via the [Duo Admin API](https://duo.com/docs/adminapi). It offers methods to create, retrieve, update, and delete core Duo such as users, phones, hardware tokens, admins, integrations, logs, and more.\n\n#### 🚀 Getting started with this collection\n\n**Step 1**(If necessary)**:** Refer to the Duo Accounts API collection, and ensure performed all of the outlined prerequisites.\n\n**Step 2:** In the **Duo Admin API \\[Child\\]** collection, go to the variables tab and enter the desired child account's name in the `child_account_name` variable field. This name must match exactly as it appears in the Duo Admin Panel.\n\n\\*NOTE:\\*To confirm the correct account name, you can use the 'Retrieve Accounts' request in the **Duo Accounts API** collection, which provides a list of child accounts and their names.\n\n**Step 3:** After populating `child_account_name`, navigate to the **Setup Child Account** folder and execute the 'Deploy Admin API' request. This request creates an Admin API integration on the target acount, and populates the request credentials automatically. Additionally, it adds the Duo reqeust credentials (IKEY, SKEY, and API HOSTNAME) to a collection variable called `child_admin_api_matrix`. This will allow you to use the Admin API on the target account in the future.\n\n**\\*IMPORTANT NOTE**\\*: Before you can use this Admin API application to make API calls to the designated child account, you are required to log into the child account directly and enable all of the grant permissions. See [here](https://duo.com/docs/adminapi#first-steps)\n\n**Step 4**: Be sure to configure any necessary or optional parameters for any particular request within this collection as specified in the Duo Admin API documentation. After setting up the environment variables and configuring parameters as needed, you're ready to utilize any request within the Duo Admin API \\[Child\\] collection.\n\n#### 💡 Collection Note\n\nThe collection performs multiple functions.\n\n1. **Deploy Admin API:** This request automates the deployment of the Admin API through a series of steps. Initially, it runs \"Retrieve Accounts\" to retrieve the list of child accounts and identifies the specific account ID by referencing the `child_account_name` variable. Subsequently, it creates the Admin API on the identified child account via \"Create Integration\" and obtains the secret key required for authentication via \"Retrieve Secret Key.\" The script stores these values as both collection variables to allow API calls to be made and also adds the API detaials to the `child_admin_api_matrix` for future use. In subsequent requests, it checks for existing entries in the matrix to determine if the Admin API \\[Child\\] already exists for a particular account and updates the collection variables accordingly.\n    \n2. **Clear Admin API Variables:** This request serves to clear the values of the collection variables related to the Admin API. It resets the `child_account_name`, `child_account_account_id`, `child_admin_api_ikey`, `child_admin_api_skey`, and `child_admin_api_host` variables to empty values. It's important to clear the variables to ensure reqeust are run on the correct account.\n    \n\n#### 🔍 Variable Reference\n\nBelow is a list of variables defined within this collection. Some variables are dynamically generated during API interactions, while others need to be manually configured.\n\n| Variable Name | Description | Scope |\n| --- | --- | --- |\n| child_admin_api_ikey | Your Accounts API Integration Key. This needs to be manually set in the global variables. | Global |\n| child_admin_api_skey | Your Accounts API Secret Key. This needs to be manually set in the global variables. | Global |\n| child_admin_api_host | Your Accounts API Hostname. This needs to be manually set in the global variables. | Global |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165404",
		"_collection_link": "https://duomsp.postman.co/workspace/Duo-MSP-API-Playground~c7115430-1cbf-4f66-9ded-2a737488a755/collection/27165404-35511012-a467-44dd-a5fd-e597a9df0287?action=share&source=collection_link&creator=27165404"
	},
	"item": [
		{
			"name": "Setup Child Account",
			"item": [
				{
					"name": "Deploy Admin API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Checks for an existing entry in child_admin_api_matrix",
									"function checkAndUpdateForExistingAccount() {",
									"    const accountName = pm.collectionVariables.get(\"child_account_name\");",
									"    const currentMatrix = pm.collectionVariables.get(\"child_admin_api_matrix\");",
									"    ",
									"    if (currentMatrix) {",
									"        const matrixArray = JSON.parse(currentMatrix);",
									"        const existingEntry = matrixArray.find(entry => entry.accountName === accountName);",
									"        ",
									"        if (existingEntry) {",
									"            // Update collection variables with the details from the existing entry",
									"            pm.collectionVariables.set(\"child_account_account_id\", existingEntry.accountId);",
									"            pm.collectionVariables.set(\"child_admin_api_ikey\", existingEntry.integrationKey);",
									"            pm.collectionVariables.set(\"child_admin_api_skey\", existingEntry.secretKey);",
									"            pm.collectionVariables.set(\"child_admin_api_host\", existingEntry.apiHostname);",
									"            ",
									"       var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"        console.log(`Admin API [Child] already exists on ${childAccountName} and is available for use.`);",
									"            return true;",
									"        }",
									"    }",
									"    // Return false if no existing entry was found",
									"    return false;",
									"}",
									"",
									"// If found, updates collection variables with the associated request credentials",
									"if (checkAndUpdateForExistingAccount()) {} else {",
									"   ",
									"//HMAC 1",
									"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\"); //Auth or Admin API IKEY",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\"); //Auth or Admin API SKEY",
									"    var API_HOSTNAME = pm.globals.get(\"accounts_api_host\"); //Auth or Admin API Hostname",
									"    var AUTH_TYPE = 'HMAC-SHA1'; // Define the authentication type",
									"",
									"    // Check if the API hostname is defined. If not, throw an error.",
									"    if (!API_HOSTNAME) {",
									"        throw new Error(\"API_HOSTNAME is not defined\");",
									"    }",
									"     ",
									"    //Adds a ? at the end of the URL even if there aren't any parameters, makes it easier to find the end of the api_call",
									"    if (requestUrl.indexOf(\"?\") == -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"",
									"    // Get the index of the start of the query parameters in the URL ",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"",
									"    // Calculate the length of the hostname",
									"    var hostname_length = requestUrl.indexOf(API_HOSTNAME) + API_HOSTNAME.length;",
									"",
									"    // Extract the API endpoint from the requestUrl, by removing the hostname and the query parameters",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);  //remove hostname and params to get the api_call",
									"     ",
									"    // Clean up api_call by removing any unwanted characters",
									"    api_call = api_call.replace(\"}}\", \"\");",
									"    // console.log('api_call:', api_call);",
									"",
									"    var params_unsorted = \"\";",
									"    var params_array = [];",
									"    //Create unsorted array of parameters from either URL or Body",
									"    //Assuming POST parameters are in the Body, GET paramters are in URL",
									"    //(technically it looks like POST can be in the URL as well)",
									"",
									"    // Depending on the HTTP method and the existence of a request body,",
									"    // extract the query parameters from the URL or the body into params_array",
									"    if (httpMethod === \"POST\" && Object.keys(requestBody).length !== 0) {",
									"        for (var parameter1 in requestBody) {",
									"            params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
									"            params_array.push(params_unsorted);",
									"        }",
									"    } else {",
									"        params_unsorted = requestUrl.substring(paramsStart+1);",
									"        params_array = params_unsorted.split(\"&\");",
									"    }",
									"     ",
									"    params_array.sort();                    //lexicographically sort parameters by key",
									"    var encoded_params = \"\";               ",
									"    if (params_array[0] !== \"\"){ //check if there are any Params to encode and create the string from",
									"        var encoded_params_array = params_array.map(urlEncodeParams);  //create URL-encoded array of key=value pairs from the sorted array",
									"        encoded_params = encoded_params_array.join(\"&\");  //create string of parameters joined by &",
									"    }",
									"     ",
									"    // Get the current timestamp in the RFC 2822 format and store it in a collection variable for later use",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\",timestamp);",
									" ",
									"    // Construct the canonical string that is to be signed, by concatenating several request elements with newlines",
									"    var requestData =  timestamp+\"\\n\"+httpMethod+\"\\n\"+API_HOSTNAME+\"\\n\"+api_call+\"\\n\"+encoded_params;",
									"    // console.log(requestData);",
									" ",
									"    // Compute the HMAC-SHA1 signature of the canonical string, using SKEY as the HMAC key",
									"    var CryptoJS = require('crypto-js');",
									"    var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
									"     ",
									"    //Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
									"    var prebase = IKEY+\":\"+ hmacDigest;",
									"    // console.log(\"prebase:\", prebase)",
									"     ",
									"    //encodes a string in base-64",
									"    var btoa = require('btoa');",
									"    var baseComplete = btoa(prebase);",
									"",
									"    var authHeader = \"Basic \"+ baseComplete;",
									"    return authHeader;",
									"}",
									"",
									"// HMAC 2",
									"function getAuthHeader2(httpMethod, requestUrl, requestBody, apiHostname) {",
									"    var IKEY = pm.globals.get(\"accounts_api_ikey\");",
									"    var SKEY = pm.globals.get(\"accounts_api_skey\");",
									"",
									"    if (requestUrl.indexOf(\"?\") === -1) {",
									"        requestUrl += \"?\";",
									"    }",
									"",
									"    var paramsStart = requestUrl.indexOf(\"?\");",
									"    var hostname_length = apiHostname.length + 8; // Length of 'https://' is 8",
									"    var api_call = requestUrl.slice(hostname_length, paramsStart);",
									"",
									"    var params_unsorted = requestUrl.substring(paramsStart + 1);",
									"    var params_array = params_unsorted.split(\"&\");",
									"    params_array.sort();",
									"    var encoded_params = params_array.map(urlEncodeParams).join(\"&\");",
									"",
									"    var moment = require('moment');",
									"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
									"    pm.globals.set(\"timestampHeader\", timestamp);",
									"",
									"    var jsonDataString = JSON.stringify(requestBody);",
									"    var CryptoJS = require('crypto-js');",
									"    var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + apiHostname + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonDataString) + \"\\n\" + CryptoJS.SHA512(\"\");",
									"",
									"    var CryptoJS = require('crypto-js');",
									"    var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
									"",
									"    var prebase = IKEY + \":\" + hmacDigest;",
									"    var btoa = require('btoa');",
									"    var baseComplete = btoa(prebase);",
									"    var authHeader = \"Basic \" + baseComplete;",
									"    return authHeader;",
									"}",
									"",
									"function urlEncodeParams(value) {",
									"    return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
									"}",
									"",
									"// Request 1 - Get Accounts",
									"function getAccounts() {",
									"    var url1 = `https://${pm.globals.get(\"accounts_api_host\")}/accounts/v1/account/list`;",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader(\"POST\", url1, {}));",
									"",
									"    pm.sendRequest({",
									"        url: url1,",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {}",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.log(\"Error:\", err);",
									"            return;",
									"        }",
									"",
									"        var responseJson = JSON.parse(res.text());",
									"        if (responseJson.stat === \"OK\") {",
									"            // Logic to set child_account_account_id and child_auth_api_host",
									"            handleGetAccountsResponse(responseJson);",
									"        } else {",
									"            console.log(\"Unexpected 'stat' value:\", responseJson.stat);",
									"        }",
									"    });",
									"}",
									"",
									"// Handler for Get Accounts response",
									"function handleGetAccountsResponse(responseJson) {",
									"    // Extract relevant data from responseJson and set collection variables",
									"    var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"    ",
									"    // Check if childAccountName is not null and not empty",
									"    if (childAccountName) {",
									"        var foundAccount = responseJson.response.find(acc => acc.name === childAccountName);",
									"",
									"        if (foundAccount) {",
									"            pm.collectionVariables.set(\"child_account_account_id\", foundAccount.account_id);",
									"            pm.collectionVariables.set(\"child_admin_api_host\", foundAccount.api_hostname);",
									"",
									"        // Proceed with Request 2 - Create Integration",
									"        createIntegration(foundAccount.api_hostname, foundAccount.account_id);",
									"    } else {",
									"        // Case when childAccountName is provided but no matching account is found",
									"        console.log(`No matching account found for ${childAccountName}. Please update the child_account_name collection variable with a correct account name.`);",
									"    }",
									"    } else {",
									"    // Case when childAccountName is null or empty",
									"    console.log(\"No account name found. Please update the child_account_name collection variable with the desired account name.\");",
									"    }",
									"}",
									"",
									"// Request 2 - Create Integration",
									"function createIntegration(apiHostname, accountId) {",
									"    var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"    ",
									"    // Ensure accountId is available",
									"    if (!accountId) {",
									"        console.log(\"Account ID is not set. Stopping execution.\");",
									"        return;",
									"    }",
									"",
									"    // Pre-check for existing integration in child_admin_api_matrix",
									"    var currentMatrix = pm.collectionVariables.get(\"child_admin_api_matrix\");",
									"    currentMatrix = currentMatrix ? JSON.parse(currentMatrix) : [];",
									"    var existingEntry = currentMatrix.find(entry => entry.accountName === childAccountName && entry.accountId === accountId);",
									"",
									"    if (existingEntry) {",
									"        console.log(`Duo Admin API [Child] already exists for ${childAccountName} and is available for use.`);",
									"        // Optionally, you can call retrieveSecretKey or any other function here if needed.",
									"        return;",
									"    }",
									"",
									"    var urlWithAccountId = `https://${apiHostname}/admin/v2/integrations?account_id=${accountId}`;",
									"    var requestBody = {",
									"        \"name\": \"Admin API [Child]\",",
									"        \"type\": \"adminapi\"",
									"    };",
									"",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader2(\"POST\", urlWithAccountId, requestBody, apiHostname));",
									"",
									"    pm.sendRequest({",
									"        url: urlWithAccountId,",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(requestBody)",
									"        }",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.error('Network error:', err);",
									"            return;",
									"        }",
									"        var responseData = res.json();",
									"        if (res.code === 200) {",
									"            var integrationKey = responseData.response.integration_key;",
									"            pm.collectionVariables.set(\"child_admin_api_ikey\", integrationKey);",
									"          ",
									"",
									"            // Update matrix and proceed to retrieve the secret key",
									"            // updateMatrix(accountId, childAccountName, integrationKey, pm.collectionVariables.get(\"child_admin_api_skey\"), apiHostname);",
									"            ",
									"            retrieveSecretKey(apiHostname, integrationKey, accountId);",
									"        } else {",
									"            console.error(`Request 2 failed. HTTP status code: ${res.code}; Response:`, responseData);",
									"        }",
									"    });",
									"}",
									"",
									"// Request 3 - Retrieve Secret Key",
									"function retrieveSecretKey(apiHostname, integrationKey, accountId) {",
									"    // Retrieve childAccountName within this function to ensure it's defined",
									"    var childAccountName = pm.collectionVariables.get(\"child_account_name\");",
									"    if (!accountId) {",
									"        console.log(\"Account ID is not provided. Stopping execution.\");",
									"        return;",
									"    }",
									"    if (!childAccountName) {",
									"        console.log(\"Child Account Name is not provided. Stopping execution.\");",
									"        return;",
									"    }",
									"",
									"    var urlWithAccountId2 = `https://${apiHostname}/admin/v1/integrations/${integrationKey}/skey?account_id=${accountId}`;",
									"    pm.globals.set(\"hmacAuthHeader\", getAuthHeader2(\"GET\", urlWithAccountId2, {}, apiHostname));",
									"",
									"    pm.sendRequest({",
									"        url: urlWithAccountId2,",
									"        method: \"GET\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\",",
									"            \"Authorization\": pm.globals.get(\"hmacAuthHeader\"),",
									"            \"Date\": pm.globals.get(\"timestampHeader\")",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({})",
									"        }",
									"    }, function(err, res) {",
									"        if (err) {",
									"            console.error('Network error on the second request:', err);",
									"        } else {",
									"            var responseData = res.json();",
									"            if (res.code === 200) {",
									"                var secretKey = responseData.response.secret_key;",
									"                pm.collectionVariables.set(\"child_admin_api_skey\", secretKey);",
									"                updateMatrix(accountId, childAccountName, integrationKey, secretKey, apiHostname);",
									"                console.log(`Admin API [Child] created successfully on Account ${childAccountName}. Please note: To use this application to perform API calls on the account, you are required to enable all desired permissions from the Duo Admin Panel`);",
									"            } else {",
									"                console.error(`Second request failed. Response code: ${res.code}; Response:`, responseData);",
									"            }",
									"        }",
									"    });",
									"}",
									"",
									"function updateMatrix(accountId, childAccountName, integrationKey, secretKey, apiHostname) {",
									"    var currentMatrix = pm.collectionVariables.get(\"child_admin_api_matrix\");",
									"    currentMatrix = currentMatrix ? JSON.parse(currentMatrix) : [];",
									"    currentMatrix.push({",
									"        accountId: accountId,",
									"        accountName: childAccountName,",
									"        integrationKey: integrationKey,",
									"        secretKey: secretKey,",
									"        apiHostname: apiHostname",
									"    });",
									"    pm.collectionVariables.set(\"child_admin_api_matrix\", JSON.stringify(currentMatrix));",
									"}",
									"",
									"// Make sure getAccounts function is defined somewhere above this snippet",
									"getAccounts();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Admin API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear the values of the collection variables",
									"pm.collectionVariables.set(\"child_account_name\", \"\");",
									"pm.collectionVariables.set(\"child_account_account_id\", \"\");",
									"pm.collectionVariables.set(\"child_admin_api_ikey\", \"\");",
									"pm.collectionVariables.set(\"child_admin_api_skey\", \"\");",
									"pm.collectionVariables.set(\"child_admin_api_host\", \"\");",
									"",
									"// Log a message to confirm the action, specifically formatted as requested",
									"console.log(`Cleared Admin API collection variables.`);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{duo_url}}",
							"host": [
								"{{duo_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Retrieve Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 800ms\", function (){",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: Specify a user name (or username alias) to look up a single user.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users?username=",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Required: The name of the user to create."
								},
								{
									"key": "aliases",
									"value": "",
									"description": "Optional: Username aliases for the user. Up to eight aliases may be specified with this parameter as a set of URL-encoded key-value pairs e.g. alias1=joe.smith&alias2=jsmith@example.com. Ignores alias position values not specified. Aliases must be unique amongst users. Mutually exclusive with alias1...4.",
									"disabled": true
								},
								{
									"key": "realname",
									"value": "",
									"description": "Optional: The real name (or full name) of this user.",
									"disabled": true
								},
								{
									"key": "email",
									"value": "",
									"description": "Optional: The email address of this user.",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Optional: he user’s status. One of:\n\n“active” - The user must complete secondary authentication. This is the default value if no status is specified.\n\n“bypass” - The user will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The user will not be able to complete secondary authentication.",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional: An optional description or notes field. Can be viewed in the Duo Admin Panel.",
									"disabled": true
								},
								{
									"key": "firstname",
									"value": "",
									"description": "Optional: The user's ginven name.",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "",
									"description": "Optional: The user's surname.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/user_id?user_id",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"user_id"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: The new username.",
									"disabled": true
								},
								{
									"key": "aliases",
									"value": "",
									"description": "Optional: Username aliases for the user. Up to eight aliases may be specified with this parameter as a set of URL-encoded key-value pairs e.g. alias1=joe.smith&alias2=jsmith@example.com. Ignores alias position values not specified. Remove the value for an existing alias by specifying a blank value e.g. alias1=. Aliases must be unique amongst users. Mutually exclusive with alias1...4.",
									"disabled": true
								},
								{
									"key": "realname",
									"value": "",
									"description": "Optional: The new real name (or full name).",
									"disabled": true
								},
								{
									"key": "email",
									"value": "",
									"description": "Optional: The new email address.",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Optional: The new status. Must be one of “active”, “disabled”, or “bypass”. See Retrieve Users for an explanation of these fields.",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "",
									"description": "Optional: The new notes field.",
									"disabled": true
								},
								{
									"key": "firstname",
									"value": "",
									"description": "Optional: The user's new given name.",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "",
									"description": "Optional: The user's new surname.",
									"disabled": true
								},
								{
									"key": "user_id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enroll User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/enroll?username&email",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"enroll"
							],
							"query": [
								{
									"key": "username",
									"value": null,
									"description": "Required: The user name (or username alias) of the user to enroll."
								},
								{
									"key": "email",
									"value": null,
									"description": "Required: The email address of this user."
								},
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds the enrollment code should be valid for. Default: 2592000 (30 days).",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bypass Codes for User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"bypass_codes"
							],
							"query": [
								{
									"key": "count",
									"value": null,
									"description": "Optional: Number of new bypass codes to create. At most 10 codes (the default) can be created at a time. Codes will be generated randomly.",
									"disabled": true
								},
								{
									"key": "codes",
									"value": null,
									"description": "Optional: CSV string of codes to use. Mutually exclusive with count.",
									"disabled": true
								},
								{
									"key": "reuse_count",
									"value": null,
									"description": "Optional: The number of times generated bypass codes can be used. If 0, the codes will have an infinite reuse_count. Default: 1.",
									"disabled": true
								},
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds generated bypass codes should be valid for. If 0 (the default) the codes will never expire.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Bypass Codes by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"bypass_codes"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Groups by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Group with User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups?group_id",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"groups"
							],
							"query": [
								{
									"key": "group_id",
									"value": null,
									"description": "Required: The ID of the group to associate with the user."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disassociate Group from User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups/[group_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"groups",
								"[group_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Phones by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"phones"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Phone with User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones?phone_id",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"phones"
							],
							"query": [
								{
									"key": "phone_id",
									"value": null,
									"description": "Required: The ID of the phone to associate with the user."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disassociate Phone from User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones[phone_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"phones[phone_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Hardware Tokens by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"tokens"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Hardware Token with User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens?token_id",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"tokens"
							],
							"query": [
								{
									"key": "token_id",
									"value": null,
									"description": "Required: The ID of the hardware token to associate with the user."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disassocate Hardware Token from User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens/[token_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"tokens",
								"[token_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve U2F Tokens by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/u2ftokens",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"u2ftokens"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebAuthn Credentials by User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/webauthncredentials",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"[user_id]",
								"webauthncredentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Synchronize User from Directory",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users/directorysync/[directory_key]/syncuser?username",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users",
								"directorysync",
								"[directory_key]",
								"syncuser"
							],
							"query": [
								{
									"key": "username",
									"value": null,
									"description": "Required: The user to update via directory sync. This should be the same as the user's username in the source directory."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#users"
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "Per-user Group Operations",
					"item": [
						{
							"name": "Retrieve Groups by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"groups"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Group with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups?group_id",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"groups"
									],
									"query": [
										{
											"key": "group_id",
											"value": null,
											"description": "Required: The ID of the group to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassociate Group from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/groups/[group_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"groups",
										"[group_id]"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/groups",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Group",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/groups?name",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"groups"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Required: The name of the group."
								},
								{
									"key": "desc",
									"value": null,
									"description": "Optional: The description of the group.",
									"disabled": true
								},
								{
									"key": "status",
									"value": null,
									"description": "Optional: The authentication status of the group. May be one of:\n\n“active” - The users in the group must complete secondary authentication.\n\n“bypass” - The users in the group will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The users in the group will not be able to authenticate.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/groups/[group_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"groups",
								"[group_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group Members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/groups/[group_id]/users",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"groups",
								"[group_id]",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Group",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/groups/[group_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"groups",
								"[group_id]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional: Update the name of the group.",
									"disabled": true
								},
								{
									"key": "desc",
									"value": null,
									"description": "Optional: Update the description of the group.",
									"disabled": true
								},
								{
									"key": "status",
									"value": null,
									"description": "Optional: The authentication status of the group. May be one of:\n\n“active” - The users in the group must complete secondary authentication.\n\n“bypass” - The users in the group will bypass secondary authentication after completing primary authentication.\n\n“disabled” - The users in the group will not be able to authenticate.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Group",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/groups/[group_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"groups",
								"[group_id]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#groups"
		},
		{
			"name": "Phones",
			"item": [
				{
					"name": "Per-user Phone Operations",
					"item": [
						{
							"name": "Retrieve Phones by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"phones"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Phone with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones?phone_id",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"phones"
									],
									"query": [
										{
											"key": "phone_id",
											"value": null,
											"description": "Required: The ID of the phone to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassociate Phone from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/phones[phone_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"phones[phone_id]"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Phones",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones"
							],
							"query": [
								{
									"key": "number",
									"value": null,
									"description": "Optional: Specify a phone number to look up a single phone.",
									"disabled": true
								},
								{
									"key": "extension",
									"value": null,
									"description": "Optional: The extension, if necessary.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Phone",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones"
							],
							"query": [
								{
									"key": "number",
									"value": "",
									"description": "Optional: The phone number. A phone with a smartphone platform but no number is a tablet.",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"description": "Optional: Free-form label for the phone.",
									"disabled": true
								},
								{
									"key": "extension",
									"value": "",
									"description": "Optional: The extension.",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Optional: The type of phone. One of: “unknown”, “mobile”, or “landline”.",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "",
									"description": "Optional: The phone platform. One of: “unknown”, “google android”, “apple ios”, “windows phone 7”, “rim blackberry”, “java j2me”, “palm webos”, “symbian os”, “windows mobile”, or “generic smartphone”.\n\n“windows phone” is accepted as a synonym for “windows phone 7”. This includes devices running Windows Phone 8.\n\nIf a smartphone’s exact platform is unknown but it will have Duo Mobile installed, use “generic smartphone” and generate an activation code. When the phone is activated its platform will be automatically detected.",
									"disabled": true
								},
								{
									"key": "predelay",
									"value": "",
									"description": "Optional: The time (in seconds) to wait after the number picks up and before dialing the extension.",
									"disabled": true
								},
								{
									"key": "postdelay",
									"value": "",
									"description": "Optional: The time (in seconds) to wait after the extension is dialed and before the speaking the prompt.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Phone by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"[phone_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Phone",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}/admin/v1/phones/[phone_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"[phone_id]"
							],
							"query": [
								{
									"key": "number",
									"value": null,
									"description": "Optional: The new number.",
									"disabled": true
								},
								{
									"key": "name",
									"value": null,
									"description": "Optional: Free-form label for the phone.",
									"disabled": true
								},
								{
									"key": "extension",
									"value": null,
									"description": "Optional: The new extension.",
									"disabled": true
								},
								{
									"key": "type",
									"value": null,
									"description": "Optional: The type of phone. One of: “unknown”, “mobile”, or “landline”.",
									"disabled": true
								},
								{
									"key": "platform",
									"value": null,
									"description": "Optional: The phone platform. One of: “unknown”, “google android”, “apple ios”, “windows phone 7”, “rim blackberry”, “java j2me”, “palm webos”, “symbian os”, “windows mobile”, or “generic smartphone”.\n“windows phone” is accepted as a synonym for “windows phone 7”. This includes devices running Windows Phone 8.\nIf a smartphone’s exact platform is unknown but it will have Duo Mobile installed, use “generic smartphone” and generate an activation code. When the phone is activated its platform will be automatically detected.",
									"disabled": true
								},
								{
									"key": "predelay",
									"value": null,
									"description": "Optional: The time (in seconds) to wait after the number picks up and before dialing the extension.",
									"disabled": true
								},
								{
									"key": "postdelay",
									"value": null,
									"description": "Optional: The time (in seconds) to wait after the extension is dialed and before the speaking the prompt.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Phone",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones[phone_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones[phone_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Activation Code",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones[phone_id]/activation_url",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones[phone_id]",
								"activation_url"
							],
							"query": [
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds this activation code should be valid for. Default: 86400 (one day).",
									"disabled": true
								},
								{
									"key": "install",
									"value": null,
									"description": "Optional: “1” to also return an installation URL for Duo Mobile; “0” to not return. Default: “0”.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Activation Code via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]/send_sms_activation",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"[phone_id]",
								"send_sms_activation"
							],
							"query": [
								{
									"key": "valid_secs",
									"value": null,
									"description": "Optional: The number of seconds this activation code should be valid for. Default: 86400 (one day).",
									"disabled": true
								},
								{
									"key": "install",
									"value": null,
									"description": "Optional: “1” to cause an installation SMS message to be sent before the activation message, “0” to not send an installation SMS message. Default: “0”.",
									"disabled": true
								},
								{
									"key": "installation_msg",
									"value": null,
									"description": "Optional: A custom installation message to send to the user. Only valid if installation was requested. Must contain the phrase “<insturl>”, which is replaced with the installation URL.",
									"disabled": true
								},
								{
									"key": "activation_msg",
									"value": null,
									"description": "Optional: A custom activation message to send to the user. Must contain “<acturl>”, which is replaced with the activation URL.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Installation URL via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]/send_sms_installation",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"[phone_id]",
								"send_sms_installation"
							],
							"query": [
								{
									"key": "installation_msg",
									"value": null,
									"description": "Optional: A custom installation message to send to the user. Must contain the phrase “<insturl>”, which is replaced with the installation URL.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Passcodes via SMS",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/phones/[phone_id]/send_sms_passcodes",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"phones",
								"[phone_id]",
								"send_sms_passcodes"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#phones"
		},
		{
			"name": "Policy",
			"item": [
				{
					"name": "/admin/v2/policies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/policies",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/v2/policies (Add New)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Policy Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/policies",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/v2/policies (Update)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"policy_name\": \"Bypass MFA\",\n   \"sections\": {   },\n   \"sections_to_delete\": [  ],\n   \"apply_to_apps\": {\n      \"affect_all_apps\": \"inactive\",\n      \"apply_list\": [\"DI06MHQ6572FIAZ9ANGT\"]\n   },\n   \"apply_to_groups_in_apps\": {\n      \"group_policy_apply_order\": \"existing\",\n      \"apply_group_policies_list\": [\n         {\n            \"app_integration_key\": \"DI06MHQ6572FIAZ9ANGT\",\n            \"group_id_list\": [\"DG2CROWCSQGVDM8RCJX4\"]\n         }\n      ]\n   }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/policies/PO4P3HWGHQEE0M5FQJ4F",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"PO4P3HWGHQEE0M5FQJ4F"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/v2/policies (Delete)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/policies/POFJO98WFAVBYLYW26BK",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"policies",
								"POFJO98WFAVBYLYW26BK"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tokens",
			"item": [
				{
					"name": "Per-user Token Operations",
					"item": [
						{
							"name": "Retrieve Hardware Tokens by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"tokens"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Hardware Token with User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens?token_id",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"tokens"
									],
									"query": [
										{
											"key": "token_id",
											"value": null,
											"description": "Required: The ID of the hardware token to associate with the user."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disassocate Hardware Token from User",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/tokens/[token_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"tokens",
										"[token_id]"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Per-administrator Token Operations",
					"item": [
						{
							"name": "Retrieve Administrator by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]"
									]
								},
								"description": "https://duo.com/docs/adminapi#retrieve-administrator-by-id"
							},
							"response": []
						},
						{
							"name": "Create Administrators",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins?email&name",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins"
									],
									"query": [
										{
											"key": "email",
											"value": null,
											"description": "Required"
										},
										{
											"key": "name",
											"value": null,
											"description": "Required"
										},
										{
											"key": "phone",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "role",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restricted_by_admin_units",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "token_id",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "valid_days",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#create-administrator"
							},
							"response": []
						},
						{
							"name": "Modify Administrator",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"admins",
										"[admin_id]"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "phone",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "password_change_required",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "role",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "restricted_by_admin_units",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "status",
											"value": null,
											"description": "Optional",
											"disabled": true
										},
										{
											"key": "token_id",
											"value": null,
											"description": "Optional",
											"disabled": true
										}
									]
								},
								"description": "https://duo.com/docs/adminapi#modify-administrator"
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve Hardware Tokens",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/tokens",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens"
							],
							"query": [
								{
									"key": "type",
									"value": null,
									"description": "Optional: Specify a type and serial number to look up a single hardware token. One of:\n\n“h6” - HOTP-6 hardware token\n“h8” - HOTP-8 hardware token\n“yk” - YubiKey AES hardware token\n“d1” - Duo-D100 hardware token\nf\n* This option is required if serial is present.",
									"disabled": true
								},
								{
									"key": "serial",
									"value": null,
									"description": "Optional: The serial number of the hardware token.\n\n* This option is required if type is present.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hardware Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/tokens?type&serial",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens"
							],
							"query": [
								{
									"key": "type",
									"value": null,
									"description": "Required: The type of hardware token to import. One of:\n\n“h6” - HOTP-6 hardware token\n“h8” - HOTP-8 hardware token\n“yk” - YubiKey AES hardware token\n\nDuo-D100 tokens (type \"d1\") are imported when purchased from Duo and may not be created via the Admin API."
								},
								{
									"key": "serial",
									"value": null,
									"description": "Required: The serial number of the token (maximum length 128 characters)."
								},
								{
									"key": "secret",
									"value": null,
									"description": "Optional: The HOTP secret. This parameter is required for HOTP-6 and HOTP-8 hardware tokens.",
									"disabled": true
								},
								{
									"key": "counter",
									"value": null,
									"description": "Optional: Initial value for the HOTP counter. Default: 0. This parameter is only valid for HOTP-6 and HOTP-8 hardware tokens.",
									"disabled": true
								},
								{
									"key": "private_id",
									"value": null,
									"description": "Optional: The YubiKey private ID. This parameter is required for YubiKey hardware tokens.",
									"disabled": true
								},
								{
									"key": "aes_key",
									"value": null,
									"description": "Optional: The YubiKey AES key. This parameter is required for YubiKey hardware tokens.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Hardware Token by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/tokens/[token_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens",
								"[token_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resync Hardware Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/tokens/[token_id]/resync?code1&code2&code3",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens",
								"[token_id]",
								"resync"
							],
							"query": [
								{
									"key": "code1",
									"value": null,
									"description": "Required: The first code from the token."
								},
								{
									"key": "code2",
									"value": null,
									"description": "Required: The second code from the token."
								},
								{
									"key": "code3",
									"value": null,
									"description": "Required: The third code from the token."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Hardware Token",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/tokens/[token_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"tokens",
								"[token_id]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#tokens"
		},
		{
			"name": "U2F Tokens",
			"item": [
				{
					"name": "Per-user U2F Token Operations",
					"item": [
						{
							"name": "Retrieve U2F Tokens by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/u2ftokens",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"u2ftokens"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve U2F Tokens",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/u2ftokens",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"u2ftokens"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve U2F Token by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/u2ftokens/[registration_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"u2ftokens",
								"[registration_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete U2F Token",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/u2ftokens/[registration_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"u2ftokens",
								"[registration_id]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#u2f-tokens"
		},
		{
			"name": "WebAuthn Credentials",
			"item": [
				{
					"name": "Per-user WebAuthn Credential Operations",
					"item": [
						{
							"name": "Retrieve WebAuthn Credentials by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/webauthncredentials",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"webauthncredentials"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieve WebAuthn Credentials",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/webauthncredentials",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"webauthncredentials"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve WebAuthn Credentials by Key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/webauthncredentials/[webauthnkey]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"webauthncredentials",
								"[webauthnkey]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete WebAuthn Credential",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/webauthncredentials/[webauthnkey]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"webauthncredentials",
								"[webauthnkey]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#webauthn-credentials"
		},
		{
			"name": "Bypass Codes",
			"item": [
				{
					"name": "Per-user Bypass Code Operations",
					"item": [
						{
							"name": "Create Bypass Codes for User",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"bypass_codes"
									],
									"query": [
										{
											"key": "count",
											"value": null,
											"description": "Optional: Number of new bypass codes to create. At most 10 codes (the default) can be created at a time. Codes will be generated randomly.",
											"disabled": true
										},
										{
											"key": "codes",
											"value": null,
											"description": "Optional: CSV string of codes to use. Mutually exclusive with count.",
											"disabled": true
										},
										{
											"key": "reuse_count",
											"value": null,
											"description": "Optional: The number of times generated bypass codes can be used. If 0, the codes will have an infinite reuse_count. Default: 1.",
											"disabled": true
										},
										{
											"key": "valid_secs",
											"value": null,
											"description": "Optional: The number of seconds generated bypass codes should be valid for. If 0 (the default) the codes will never expire.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Bypass Codes by User ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{child_admin_api_host}}/admin/v1/users/[user_id]/bypass_codes",
									"protocol": "https",
									"host": [
										"{{child_admin_api_host}}"
									],
									"path": [
										"admin",
										"v1",
										"users",
										"[user_id]",
										"bypass_codes"
									],
									"query": [
										{
											"key": "limit",
											"value": null,
											"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
											"disabled": true
										},
										{
											"key": "offset",
											"value": null,
											"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrive Bypass Codes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/bypass_codes",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"bypass_codes"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Bypass Codes by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/bypass_codes/[bypass_code_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"bypass_codes",
								"[bypass_code_id]"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bypass Code",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/bypass_codes/[bypass_code_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"bypass_codes",
								"[bypass_code_id]"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#bypass-codes"
		},
		{
			"name": "Integrations",
			"item": [
				{
					"name": "Retrieve Integrations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/integrations",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-integrations"
					},
					"response": []
				},
				{
					"name": "Create Integrations",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/integrations?name&type",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Required"
								},
								{
									"key": "type",
									"value": null,
									"description": "Required"
								},
								{
									"key": "adminapi_admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "notes",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-integration"
					},
					"response": []
				},
				{
					"name": "Retrieve Integration by Integration Key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/integrations/[integration_key]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations",
								"[integration_key]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-integration-by-integration-key"
					},
					"response": []
				},
				{
					"name": "Modify Integration",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/integrations/[integration_key]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations",
								"[integration_key]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "networks_for_api_access",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_info",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_log",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_read_resource",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_settings",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "adminapi_write_resource",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "trusted_device_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups_allowed",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist_enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "ip_whitelist_enroll_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "policy_key",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "reset_secret_key",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "self_service_allowed",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "username_normalization_policy",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-integration"
					},
					"response": []
				},
				{
					"name": "Delete Integration",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/integrations/[integration_key]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"integrations",
								"[integration_key]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-integration"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#integrations"
		},
		{
			"name": "Endpoints",
			"item": [
				{
					"name": "Retrieve Endpoints",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/endpoints",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"endpoints"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-endpoints"
					},
					"response": []
				},
				{
					"name": "Retrieve Endpoints by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/endpoints/[epkey]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"endpoints",
								"[epkey]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-endpoint-by-id"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#endpoints"
		},
		{
			"name": "Administrators",
			"item": [
				{
					"name": "Retrieve Administrators",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrators"
					},
					"response": []
				},
				{
					"name": "Create Administrators",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins?email&name",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins"
							],
							"query": [
								{
									"key": "email",
									"value": null,
									"description": "Required"
								},
								{
									"key": "name",
									"value": null,
									"description": "Required"
								},
								{
									"key": "phone",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "role",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restricted_by_admin_units",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "token_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "valid_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-administrator"
					},
					"response": []
				},
				{
					"name": "Retrieve Administrator by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrator-by-id"
					},
					"response": []
				},
				{
					"name": "Modify Administrator",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "phone",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "password_change_required",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "role",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restricted_by_admin_units",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "status",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "token_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-administrator"
					},
					"response": []
				},
				{
					"name": "Delete Administrator",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-administrator"
					},
					"response": []
				},
				{
					"name": "Reset Administrator Authentication Attempts",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/reset",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"reset"
							]
						},
						"description": "https://duo.com/docs/adminapi#reset-administrator-authentication-attempts"
					},
					"response": []
				},
				{
					"name": "Email Activation Link to Administrator Pending Activation",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/activation_link/email",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"activation_link",
								"email"
							]
						},
						"description": "https://duo.com/docs/adminapi#email-activation-link-to-administrator-pending-activation"
					},
					"response": []
				},
				{
					"name": "Delete Activation Link to Administrator Pending Activation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/activation_link",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"activation_link"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-activation-link-from-administrator-pending-activation"
					},
					"response": []
				},
				{
					"name": "Create Activation Link for Administrator Pending Activation",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/activation_link",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"activation_link"
							]
						},
						"description": "https://duo.com/docs/adminapi#create-activation-link-for-administrator-pending-activation"
					},
					"response": []
				},
				{
					"name": "Create Administrator Activation Link",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/activations?email",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"activations"
							],
							"query": [
								{
									"key": "email",
									"value": null,
									"description": "Required"
								},
								{
									"key": "admin_name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "admin_role",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "valid_days",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#create-administrator-activation-link"
					},
					"response": []
				},
				{
					"name": "Retrieve Pending Administrator Activation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/activations?limit&offset",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"activations"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional"
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional"
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-pending-administrator-activations"
					},
					"response": []
				},
				{
					"name": "Delete Pending Administrator Activation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/activations/[admin_activation_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"activations",
								"[admin_activation_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-pending-administrator-activation"
					},
					"response": []
				},
				{
					"name": "Retrieve Admin External Password Management Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/password_mgmt?limit&offset",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"password_mgmt"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional"
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional"
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-admin-external-password-management-status"
					},
					"response": []
				},
				{
					"name": "Retrieve Admin External Password Management Status by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/password_mgmt",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"password_mgmt"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-admin-external-password-management-status-by-id"
					},
					"response": []
				},
				{
					"name": "Modify Admin External Password Management Status or Password",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/[admin_id]/password_mgmt",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"[admin_id]",
								"password_mgmt"
							],
							"query": [
								{
									"key": "has_external_password_mgmt",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "password",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-admin-external-password-management-status-or-password"
					},
					"response": []
				},
				{
					"name": "Retrieve Administrator Authentication Factors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/allowed_auth_methods",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"allowed_auth_methods"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrator-authentication-factors"
					},
					"response": []
				},
				{
					"name": "Restrict Administrator Authentication Factors",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/admins/allowed_auth_methods",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"admins",
								"allowed_auth_methods"
							],
							"query": [
								{
									"key": "hardware_token_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "mobile_otp_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "push_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "voice_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "yubikey_enabled",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#restrict-administrator-authentication-factors"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#administrators"
		},
		{
			"name": "Administrative Units",
			"item": [
				{
					"name": "Retrieve Administrative Units",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units"
							],
							"query": [
								{
									"key": "admin_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "group_id",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "integration_key",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrative-units"
					},
					"response": []
				},
				{
					"name": "Retrieve Administrative Unit Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#retrieve-administrative-unit-details"
					},
					"response": []
				},
				{
					"name": "Add Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units?name&description",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Required"
								},
								{
									"key": "description",
									"value": null,
									"description": "Required"
								},
								{
									"key": "restrict_by_groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restrict_by_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#add-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Modify Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]"
							],
							"query": [
								{
									"key": "name",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "description",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restrict_by_groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "restrict_by_integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "admins",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups",
									"value": null,
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "integrations",
									"value": null,
									"description": "Optional",
									"disabled": true
								}
							]
						},
						"description": "https://duo.com/docs/adminapi#modify-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Add Administrator to Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/admin/[admin_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"admin",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#add-administrator-to-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Remove Administrator from Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/admin/[admin_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"admin",
								"[admin_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#remove-administrator-from-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Add Group to Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/group/[goup_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"group",
								"[goup_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#add-group-to-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Remove Group from Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/group/[goup_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"group",
								"[goup_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#remove-group-from-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Add Integration to Administrative Unit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/integration/[integration_key]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"integration",
								"[integration_key]"
							]
						},
						"description": "https://duo.com/docs/adminapi#add-integration-to-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Remove Integration from Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]/integration/[integration_key]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]",
								"integration",
								"[integration_key]"
							]
						},
						"description": "https://duo.com/docs/adminapi#remove-integration-from-administrative-unit"
					},
					"response": []
				},
				{
					"name": "Delete Administrative Unit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/administrative_units/[admin_unit_id]",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"administrative_units",
								"[admin_unit_id]"
							]
						},
						"description": "https://duo.com/docs/adminapi#delete-administrative-unit"
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#administrative-units"
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Authentication Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v2/logs/authentication?mintime=1613722194760&maxtime=1614722194860",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v2",
								"logs",
								"authentication"
							],
							"query": [
								{
									"key": "limit",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "next_offset",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "ts:asc",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": "1613722194760",
									"description": "Required"
								},
								{
									"key": "maxtime",
									"value": "1614722194860",
									"description": "Required"
								},
								{
									"key": "applications",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "users",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "event_types",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "factors",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "groups",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "phone_numbers",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "reasons",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "results",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "registration_id",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "token_id",
									"value": "",
									"description": "Optional",
									"disabled": true
								},
								{
									"key": "webauthnkey",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication Logs (Legacy v1)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logs/authentication",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"authentication"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Administrator Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logs/administrator",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"administrator"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Telephony Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logs/telephony",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"telephony"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Offline Enrollment Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logs/offline_enrollment",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logs",
								"offline_enrollment"
							],
							"query": [
								{
									"key": "mintime",
									"value": "",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#logs"
		},
		{
			"name": "Trust Monitor",
			"item": [
				{
					"name": "Retrieve Events",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/trust_monitor/events",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"trust_monitor",
								"events"
							],
							"query": [
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 500",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": "1613722194760",
									"description": "Required: Return records that have a 13 character Unix timestamp in milliseconds of mintime or later. This value must be strictly less then maxtime.",
									"disabled": true
								},
								{
									"key": "maxtime",
									"value": "1614722194860",
									"description": "Required: Return records that have a 13 character Unix timestamp in milliseconds of maxtime or earlier. This value must be strictly greater then mintime.",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Optional: The type of security event.\n\nauth\tReturn security events that are denied anomalous authentications.\n\nbypass_status_enabled\tReturn security events that are bypass status enabled.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#trust-monitor"
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Retrieve Settings Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/settings",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Settings",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/settings",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"settings"
							],
							"query": [
								{
									"key": "caller_id",
									"value": "",
									"description": "Optional: Automated calls will appear to come from this number. This does not apply to text messages. Customizing this number may cause telephony providers to flag your number as fraudulent and result in failed user authentications.",
									"disabled": true
								},
								{
									"key": "fraud_email",
									"value": "\"\"",
									"description": "Optional: The email address to be notified when a user reports a fraudulent authentication attempt or is locked out due to failed authentication attempts, or empty for all administrators will be notified. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.",
									"disabled": true
								},
								{
									"key": "fraud_email_enabled",
									"value": null,
									"description": "Optional: Set to true to enable fraudulent authentication notification emails. False disables the fraud email functionality. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.",
									"disabled": true
								},
								{
									"key": "inactive_user_expiration",
									"value": null,
									"description": "Optional: Users will be automatically deleted if they are inactive (no successful logins) for a this amount of days. Minimum: 30 days. Maximum: 365 days.",
									"disabled": true
								},
								{
									"key": "keypress_confirm",
									"value": null,
									"description": "Optional: The key for users to press to authenticate, or empty if any key should be pressed to authenticate. If this is empty, keypress_fraud must be as well.",
									"disabled": true
								},
								{
									"key": "keypress_fraud",
									"value": null,
									"description": "Optional: The key for users to report fraud, or empty if any key should be pressed to authenticate. If this is empty, keypress_confirm must be as well.\n",
									"disabled": true
								},
								{
									"key": "language",
									"value": null,
									"description": "Optional: Sets the language used in the browser-based user authentication prompt. One of: “EN”, “DE”, “FR”. Default: “EN”",
									"disabled": true
								},
								{
									"key": "lockout_expire_duration",
									"value": null,
									"description": "Optional: If non-zero, the time in minutes until a locked-out user’s status reverts to “Active”. If 0, a user remains locked out until their status is manually changed (By an admin or API call). Minimum: 5 minutes. Maximum: 30000 minutes.",
									"disabled": true
								},
								{
									"key": "lockout_threshold",
									"value": null,
									"description": "Optional: The number of consecutive failed authentication attempts before the user’s status is set to “Locked Out” and the user is denied access.",
									"disabled": true
								},
								{
									"key": "minimum_password_length",
									"value": null,
									"description": "Optional: The minimum number of characters that an administrator’s Duo Admin Panel password must contain. This is only enforced on password creation and reset; existing passwords will not be invalidated. \n\nDefault: 12.",
									"disabled": true
								},
								{
									"key": "mobile_otp_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use authenticate with a passcode generated by Duo Mobile. If false, users will not be able to authenticate with a passcode generated by Duo Mobile. Note that if false, this will override Duo Mobile passcodes for any groups.",
									"disabled": true
								},
								{
									"key": "password_requires_lower_alpha",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain a lower case alphabetic character. If false, administrator passwords will not be required to contain a lower case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "password_requires_numeric",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain a numeric character. If false, administrator passwords will not be required to contain a numeric character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "password_requires_special",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain a special (non-alphanumeric) character. If false, administrator passwords will not be required to contain a special (non-alphanumeric) character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "password_requires_upper_alpha",
									"value": null,
									"description": "Optional: If true, administrator passwords will be required to contain an upper case alphabetic character. If false, administrator passwords will not be required to contain an upper case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.",
									"disabled": true
								},
								{
									"key": "push_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use Duo Push to authenticate. If false, users will not be able to use Duo Push to authenticate. Note that if false, this will override push_enabled for any groups.",
									"disabled": true
								},
								{
									"key": "sms_batch",
									"value": null,
									"description": "Optional: How many passcodes to send at one time, up to 10.",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use SMS passcodes to authenticate. If false, users will not be able to use SMS passcodes to authenticate. Note that if false, this will override sms_enabled for any groups.",
									"disabled": true
								},
								{
									"key": "sms_expiration",
									"value": null,
									"description": "Optional: The time in minutes to expire and invalidate SMS passcodes, or empty if they should not expire.",
									"disabled": true
								},
								{
									"key": "sms_message",
									"value": null,
									"description": "Optional: Description sent with every batch of SMS passcodes.",
									"disabled": true
								},
								{
									"key": "sms_refresh",
									"value": null,
									"description": "Optional: If 1, a new set of SMS passcodes will automatically be sent after the last one is used. If 0, a new set will not be sent.",
									"disabled": true
								},
								{
									"key": "telephony_warning_min",
									"value": null,
									"description": "Optional: Configure a alert to be sent when the account has fewer than this many telephony credits remaining.",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": null,
									"description": "Optional: This is the timezone used when displaying timestamps in the Duo Admin Panel. Timezones must be entries in the IANA Time Zone Database, for example, “US/Eastern”, “Australia/Darwin”, “GMT”.",
									"disabled": true
								},
								{
									"key": "voice_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to authenticate using voice callback. If false, users will not be able to authenticate using voice callback. Note that if false, this will override voice_enabled for any groups.",
									"disabled": true
								},
								{
									"key": "user_telephony_cost_max",
									"value": null,
									"description": "Optional: The maximum number of telephony credits a user may consume in a single authentication event. This excludes Duo administrators authenticating to the Duo administration panel. Default: 20.",
									"disabled": true
								},
								{
									"key": "u2f_enabled",
									"value": null,
									"description": "Optional: Legacy parameter; no effect if specified. Use Duo policies to configure this setting.\n\nIf true, users will be able to use authenticate with a U2F device. If false, users will not be able to authenticate with a U2F device. Default: false.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Duo Mobile Logo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logo",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Duo Mobile Logo Copy",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logo",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duo Mobile Logo",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/logo",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"logo"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#settings"
		},
		{
			"name": "Account Info",
			"item": [
				{
					"name": "Retrieve Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: Specify a user name (or username alias) to look up a single user.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Telephony Credits Used Report Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/users",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "",
									"description": "Optional: Specify a user name (or username alias) to look up a single user.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": null,
									"description": "Optional: The maximum number of records returned.\n\nDefault: 100; Max: 300",
									"disabled": true
								},
								{
									"key": "offset",
									"value": null,
									"description": "Optional: The offset from 0 at which to start record retrieval.\n\nWhen used with \"limit\", the handler will return \"limit\" records starting at the n-th record, where n is the offset.\n\nDefault: 0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication Attempts Report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/info/authentication_attempts",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"info",
								"authentication_attempts"
							],
							"query": [
								{
									"key": "maxtime",
									"value": "",
									"description": "Optional: Limit report to events before this UNIX timestamp. Defaults to the current time.",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": null,
									"description": "Optional: Limit report to events after this UNIX timestamp. Defaults to thirty days before maxtime.\n",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users with Authentication Attempts Report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{child_admin_api_host}}/admin/v1/info/user_authentication_attempts",
							"protocol": "https",
							"host": [
								"{{child_admin_api_host}}"
							],
							"path": [
								"admin",
								"v1",
								"info",
								"user_authentication_attempts"
							],
							"query": [
								{
									"key": "maxtime",
									"value": "",
									"description": "Optional: Limit report to events before this UNIX timestamp. Defaults to the current time.",
									"disabled": true
								},
								{
									"key": "mintime",
									"value": null,
									"description": "Optional: Limit report to events after this UNIX timestamp. Defaults to thirty days before maxtime.\n",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "https://duo.com/docs/adminapi#account-info"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Tested on Postman 7.8",
					"",
					"// Variable declaration",
					"    // Require 'url' module to use its methods for handling and transforming URLs.",
					"    var URL = require('url');",
					"",
					"    // Get the hostname for the accounts API from Postman collection variables.",
					"    var hostname = pm.collectionVariables.get(\"child_admin_api_host\");",
					"",
					"    // Declare a variable to hold Duo Authentication Version",
					"    var duo_auth_ver;",
					"    // Retrieve the request url",
					"    var req_url = pm.request.url.toString();",
					"",
					"    function urlEncodeParams(value, index, array) {",
					"        return value.split(/=(.+)/)[0] + \"=\" + encodeURIComponent(value.split(/=(.+)/)[1]);",
					"}",
					"",
					"function getAuthHeader(httpMethod, hostname, path, q_str, requestBody, duo_auth_ver) {",
					"    var IKEY = pm.collectionVariables.get(\"child_admin_api_ikey\"); //Auth or Admin API IKEY",
					"    var SKEY = pm.collectionVariables.get(\"child_admin_api_skey\"); //Auth or Admin API SKEY",
					"    var API_HOSTNAME = pm.collectionVariables.get(\"child_admin_api_host\"); //Auth or Admin API Hostname",
					"",
					"    q_str = decodeURIComponent(q_str);",
					"    api_call = path;",
					"",
					"    var AUTH_TYPE;",
					"    var hmacDigest;",
					"",
					"    // The current time, formatted as RFC 2822. This must be the same string as the \"Date\" header (or X-Duo-Date header).",
					"    var moment = require('moment');",
					"    var timestamp = moment().format(\"ddd, DD MMM YYYY HH:mm:ss ZZ\");",
					"    pm.globals.set(\"timestampHeader\", timestamp);",
					"",
					"    switch (duo_auth_ver) {",
					"        case 'v2':",
					"            AUTH_TYPE = 'HMAC-SHA1';",
					"            var params_unsorted = \"\";",
					"            var params_array = [];",
					"            // Create unsorted array of parameters from either URL or Body",
					"            // Assuming POST parameters are in the Body, GET parameters are in URL",
					"            if (Object.keys(requestBody).length !== 0) {",
					"                for (var parameter1 in requestBody) {",
					"                    params_unsorted = parameter1 + \"=\" + requestBody[parameter1];",
					"                    params_array.push(params_unsorted);",
					"                }",
					"            } else {",
					"                params_unsorted = q_str;",
					"                if (q_str) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                }",
					"            }",
					"",
					"            params_array.sort(); // Lexicographically sort parameters by key",
					"            var encoded_params = \"\";",
					"            if (params_array[0] !== \"\") { // Check if there are any Params to encode and create the string from",
					"                var encoded_params_array = params_array.map(urlEncodeParams); // Create URL-encoded array of key=value pairs from the sorted array",
					"                encoded_params = encoded_params_array.join(\"&\"); // Create string of parameters joined by &",
					"            }",
					"            var requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params;",
					"            var CryptoJS = require('crypto-js');",
					"            var hmacDigest = CryptoJS.HmacSHA1(requestData, SKEY);",
					"            pm.request.headers.add({ key: 'Content-Type', value: 'application/x-www-form-urlencoded' })",
					"            break;",
					"        case 'v5':",
					"            AUTH_TYPE = 'HMAC-SHA512';",
					"            var body_length = Object.keys(requestBody).length;",
					"            var encoded_params = \"\";",
					"            var requestData = \"\";",
					"",
					"            if (body_length != 0) {",
					"                var jsonData = JSON.parse(pm.request.body.toJSON().raw);",
					"                jsonData = JSON.stringify(jsonData);",
					"                params_unsorted = q_str;",
					"                if (params_unsorted.length > 0) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort();",
					"                    var encoded_params_array = params_array.map(urlEncodeParams);",
					"                    encoded_params = encoded_params_array.join(\"&\");",
					"                }",
					"                var CryptoJS = require('crypto-js');",
					"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(jsonData) + \"\\n\" + CryptoJS.SHA512(\"\");",
					"                pm.request.body = jsonData;",
					"            } else {",
					"                params_unsorted = q_str;",
					"                if (params_unsorted.length > 0) {",
					"                    params_array = params_unsorted.split(\"&\");",
					"                    params_array.sort();",
					"                    var encoded_params_array = params_array.map(urlEncodeParams);",
					"                    encoded_params = encoded_params_array.join(\"&\");",
					"                }",
					"                var CryptoJS = require('crypto-js');",
					"                requestData = timestamp + \"\\n\" + httpMethod + \"\\n\" + API_HOSTNAME + \"\\n\" + api_call + \"\\n\" + encoded_params + \"\\n\" + CryptoJS.SHA512(\"\") + \"\\n\" + CryptoJS.SHA512(\"\");",
					"            }",
					"",
					"            var hmacDigest = CryptoJS.HmacSHA512(requestData, SKEY);",
					"            break;",
					"    }",
					"",
					"    // Use HTTP Basic Authentication for the request, using your integration key as the username and the HMAC-SHA1 signature as the password.",
					"    var prebase = IKEY + \":\" + hmacDigest;",
					"",
					"    // Encodes a string in base-64",
					"    var btoa = require('btoa');",
					"    var baseComplete = btoa(prebase);",
					"",
					"    var authHeader = \"Basic \" + baseComplete;",
					"    return authHeader;",
					"}",
					"",
					"// Find and replace",
					"    // Check if the request url includes '/v1/' or '/v2/' and set the Duo Authentication Version accordingly",
					"    if (req_url.includes('/v1/')) {",
					"        duo_auth_ver = 'v2';",
					"    } else if (req_url.includes('/v2/')) {",
					"        duo_auth_ver = 'v5';",
					"    }",
					"",
					"    // Check if the request URL includes '{{accountId}}'",
					"    if (req_url.includes('{{account_id}}')) {",
					"        var account_id = pm.globals.get('account_id');",
					"        req_url = req_url.replace('{{account_id}}', account_id);",
					"    }",
					"",
					"    // Parse the query string from the request url",
					"    var q_str = URL.parse(req_url).query;",
					"",
					"    // Check if the query string is null. If it is, set it to an empty string",
					"    if (q_str == null) {",
					"        q_str = \"\";",
					"    }",
					"",
					"    // Parse the path from the request url, remove the leading '/', then rejoin the path",
					"    // Replace variables in path",
					"    var path = decodeURIComponent(URL.parse(pm.request.url.toString()).pathname).split(\"/\");",
					"        path = path.slice(1);",
					"        path = path.join('/');",
					"        path = '/' + path",
					";",
					"",
					"pm.globals.set(\"hmacAuthHeader\", getAuthHeader(pm.request.method, hostname, path, q_str, pm.request.body, duo_auth_ver));",
					"",
					"pm.request.headers.add({ key: 'Date', value: \"{{timestampHeader}}\" });",
					"pm.request.headers.add({ key: 'Authorization', value: \"{{hmacAuthHeader}}\" });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.globals.unset(\"timestampHeader\");",
					"pm.globals.unset(\"hmacAuthHeader\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "child_account_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "child_account_account_id",
			"value": ""
		},
		{
			"key": "child_admin_api_host",
			"value": ""
		},
		{
			"key": "child_admin_api_ikey",
			"value": ""
		},
		{
			"key": "child_admin_api_skey",
			"value": ""
		},
		{
			"key": "child_admin_api_matrix",
			"value": ""
		}
	]
}